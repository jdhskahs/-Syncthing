// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/ur/aggregate.proto

package ur

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Aggregation struct {
	Date       int64       `protobuf:"varint,1,opt,name=date,proto3" json:"date" xml:"date"`
	Count      int64       `protobuf:"varint,2,opt,name=count,proto3" json:"count" xml:"count"`
	CountV2    int64       `protobuf:"varint,3,opt,name=countV2,proto3" json:"countv2" xml:"countv2"`
	CountV3    int64       `protobuf:"varint,4,opt,name=countV3,proto3" json:"countv3" xml:"countv3"`
	Statistics []Statistic `protobuf:"bytes,5,rep,name=statistics,proto3" json:"statistics" xml:"statistic"`
}

func (m *Aggregation) Reset()         { *m = Aggregation{} }
func (m *Aggregation) String() string { return proto.CompactTextString(m) }
func (*Aggregation) ProtoMessage()    {}
func (*Aggregation) Descriptor() ([]byte, []int) {
	return fileDescriptor_949bea198a35249c, []int{0}
}
func (m *Aggregation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Aggregation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Aggregation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Aggregation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Aggregation.Merge(m, src)
}
func (m *Aggregation) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Aggregation) XXX_DiscardUnknown() {
	xxx_messageInfo_Aggregation.DiscardUnknown(m)
}

var xxx_messageInfo_Aggregation proto.InternalMessageInfo

type Statistic struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key" xml:"key"`
	// Types that are valid to be assigned to Statistic:
	//
	//	*Statistic_Float
	//	*Statistic_Integer
	//	*Statistic_Histogram
	//	*Statistic_MappedInteger
	Statistic isStatistic_Statistic `protobuf_oneof:"statistic"`
}

func (m *Statistic) Reset()         { *m = Statistic{} }
func (m *Statistic) String() string { return proto.CompactTextString(m) }
func (*Statistic) ProtoMessage()    {}
func (*Statistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_949bea198a35249c, []int{1}
}
func (m *Statistic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Statistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Statistic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Statistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statistic.Merge(m, src)
}
func (m *Statistic) XXX_Size() int {
	return m.ProtoSize()
}
func (m *Statistic) XXX_DiscardUnknown() {
	xxx_messageInfo_Statistic.DiscardUnknown(m)
}

var xxx_messageInfo_Statistic proto.InternalMessageInfo

type isStatistic_Statistic interface {
	isStatistic_Statistic()
	MarshalTo([]byte) (int, error)
	ProtoSize() int
}

type Statistic_Float struct {
	Float *FloatStatistic `protobuf:"bytes,2,opt,name=float,proto3,oneof" json:"float" xml:"float"`
}
type Statistic_Integer struct {
	Integer *IntegerStatistic `protobuf:"bytes,3,opt,name=integer,proto3,oneof" json:"integer" xml:"integer"`
}
type Statistic_Histogram struct {
	Histogram *MapHistogram `protobuf:"bytes,4,opt,name=histogram,proto3,oneof" json:"histogram" xml:"histogram"`
}
type Statistic_MappedInteger struct {
	MappedInteger *MapIntegerStatistic `protobuf:"bytes,5,opt,name=mappedInteger,proto3,oneof" json:"mappedinteger" xml:"mappedinteger"`
}

func (*Statistic_Float) isStatistic_Statistic()         {}
func (*Statistic_Integer) isStatistic_Statistic()       {}
func (*Statistic_Histogram) isStatistic_Statistic()     {}
func (*Statistic_MappedInteger) isStatistic_Statistic() {}

func (m *Statistic) GetStatistic() isStatistic_Statistic {
	if m != nil {
		return m.Statistic
	}
	return nil
}

func (m *Statistic) GetFloat() *FloatStatistic {
	if x, ok := m.GetStatistic().(*Statistic_Float); ok {
		return x.Float
	}
	return nil
}

func (m *Statistic) GetInteger() *IntegerStatistic {
	if x, ok := m.GetStatistic().(*Statistic_Integer); ok {
		return x.Integer
	}
	return nil
}

func (m *Statistic) GetHistogram() *MapHistogram {
	if x, ok := m.GetStatistic().(*Statistic_Histogram); ok {
		return x.Histogram
	}
	return nil
}

func (m *Statistic) GetMappedInteger() *MapIntegerStatistic {
	if x, ok := m.GetStatistic().(*Statistic_MappedInteger); ok {
		return x.MappedInteger
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Statistic) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Statistic_Float)(nil),
		(*Statistic_Integer)(nil),
		(*Statistic_Histogram)(nil),
		(*Statistic_MappedInteger)(nil),
	}
}

type FloatStatistic struct {
	Count       int64     `protobuf:"varint,1,opt,name=count,proto3" json:"count" xml:"count"`
	Min         float64   `protobuf:"fixed64,2,opt,name=min,proto3" json:"min" xml:"min"`
	Max         float64   `protobuf:"fixed64,3,opt,name=max,proto3" json:"max" xml:"max"`
	Med         float64   `protobuf:"fixed64,4,opt,name=med,proto3" json:"med" xml:"med"`
	Percentiles []float64 `protobuf:"fixed64,5,rep,packed,name=percentiles,proto3" json:"percentiles" xml:"percentile"`
	Sum         float64   `protobuf:"fixed64,7,opt,name=sum,proto3" json:"sum" xml:"sum"`
	Avg         float64   `protobuf:"fixed64,8,opt,name=avg,proto3" json:"avg" xml:"avg"`
}

func (m *FloatStatistic) Reset()         { *m = FloatStatistic{} }
func (m *FloatStatistic) String() string { return proto.CompactTextString(m) }
func (*FloatStatistic) ProtoMessage()    {}
func (*FloatStatistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_949bea198a35249c, []int{2}
}
func (m *FloatStatistic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FloatStatistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FloatStatistic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FloatStatistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatStatistic.Merge(m, src)
}
func (m *FloatStatistic) XXX_Size() int {
	return m.ProtoSize()
}
func (m *FloatStatistic) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatStatistic.DiscardUnknown(m)
}

var xxx_messageInfo_FloatStatistic proto.InternalMessageInfo

type IntegerStatistic struct {
	Count       int64   `protobuf:"varint,1,opt,name=count,proto3" json:"count" xml:"count"`
	Min         int64   `protobuf:"varint,2,opt,name=min,proto3" json:"min" xml:"min"`
	Max         int64   `protobuf:"varint,3,opt,name=max,proto3" json:"max" xml:"max"`
	Med         float64 `protobuf:"fixed64,4,opt,name=med,proto3" json:"med" xml:"med"`
	Percentiles []int64 `protobuf:"varint,5,rep,packed,name=percentiles,proto3" json:"percentiles" xml:"percentile"`
	Sum         int64   `protobuf:"varint,6,opt,name=sum,proto3" json:"sum" xml:"sum"`
	Avg         float64 `protobuf:"fixed64,7,opt,name=avg,proto3" json:"avg" xml:"avg"`
}

func (m *IntegerStatistic) Reset()         { *m = IntegerStatistic{} }
func (m *IntegerStatistic) String() string { return proto.CompactTextString(m) }
func (*IntegerStatistic) ProtoMessage()    {}
func (*IntegerStatistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_949bea198a35249c, []int{3}
}
func (m *IntegerStatistic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IntegerStatistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IntegerStatistic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IntegerStatistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegerStatistic.Merge(m, src)
}
func (m *IntegerStatistic) XXX_Size() int {
	return m.ProtoSize()
}
func (m *IntegerStatistic) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegerStatistic.DiscardUnknown(m)
}

var xxx_messageInfo_IntegerStatistic proto.InternalMessageInfo

type MapHistogram struct {
	Map map[string]int64 `protobuf:"bytes,1,rep,name=map,proto3" json:"map" xml:"map" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *MapHistogram) Reset()         { *m = MapHistogram{} }
func (m *MapHistogram) String() string { return proto.CompactTextString(m) }
func (*MapHistogram) ProtoMessage()    {}
func (*MapHistogram) Descriptor() ([]byte, []int) {
	return fileDescriptor_949bea198a35249c, []int{4}
}
func (m *MapHistogram) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapHistogram) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapHistogram.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapHistogram) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapHistogram.Merge(m, src)
}
func (m *MapHistogram) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MapHistogram) XXX_DiscardUnknown() {
	xxx_messageInfo_MapHistogram.DiscardUnknown(m)
}

var xxx_messageInfo_MapHistogram proto.InternalMessageInfo

type MapIntegerStatistic struct {
	Map map[string]IntegerStatistic `protobuf:"bytes,1,rep,name=map,proto3" json:"map" xml:"map" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MapIntegerStatistic) Reset()         { *m = MapIntegerStatistic{} }
func (m *MapIntegerStatistic) String() string { return proto.CompactTextString(m) }
func (*MapIntegerStatistic) ProtoMessage()    {}
func (*MapIntegerStatistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_949bea198a35249c, []int{5}
}
func (m *MapIntegerStatistic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapIntegerStatistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapIntegerStatistic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapIntegerStatistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapIntegerStatistic.Merge(m, src)
}
func (m *MapIntegerStatistic) XXX_Size() int {
	return m.ProtoSize()
}
func (m *MapIntegerStatistic) XXX_DiscardUnknown() {
	xxx_messageInfo_MapIntegerStatistic.DiscardUnknown(m)
}

var xxx_messageInfo_MapIntegerStatistic proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Aggregation)(nil), "ur.Aggregation")
	proto.RegisterType((*Statistic)(nil), "ur.Statistic")
	proto.RegisterType((*FloatStatistic)(nil), "ur.FloatStatistic")
	proto.RegisterType((*IntegerStatistic)(nil), "ur.IntegerStatistic")
	proto.RegisterType((*MapHistogram)(nil), "ur.MapHistogram")
	proto.RegisterMapType((map[string]int64)(nil), "ur.MapHistogram.MapEntry")
	proto.RegisterType((*MapIntegerStatistic)(nil), "ur.MapIntegerStatistic")
	proto.RegisterMapType((map[string]IntegerStatistic)(nil), "ur.MapIntegerStatistic.MapEntry")
}

func init() { proto.RegisterFile("lib/ur/aggregate.proto", fileDescriptor_949bea198a35249c) }

var fileDescriptor_949bea198a35249c = []byte{
	// 757 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xe3, 0xa6, 0x69, 0xc6, 0x5f, 0x3f, 0x2a, 0xb7, 0x2a, 0xa6, 0xaa, 0xec, 0x68, 0x4a,
	0xab, 0x0a, 0xa1, 0x44, 0x4a, 0x24, 0x84, 0xba, 0xc3, 0x52, 0x21, 0x48, 0xb0, 0x31, 0xa8, 0x0b,
	0x76, 0x93, 0x64, 0xea, 0x5a, 0x8d, 0x7f, 0xe4, 0x9f, 0x28, 0xd9, 0xf1, 0x08, 0x3c, 0x02, 0x1b,
	0xd6, 0x3c, 0x01, 0xfb, 0xec, 0x28, 0x3b, 0x56, 0x96, 0xda, 0x48, 0x2c, 0xb2, 0xcc, 0x13, 0xa0,
	0xb9, 0xfe, 0x19, 0x37, 0x50, 0x1a, 0x15, 0xb1, 0xf3, 0x3d, 0x3e, 0xf7, 0xdc, 0x7b, 0xcf, 0xf5,
	0x8c, 0xd1, 0xf6, 0xc0, 0xea, 0x36, 0x23, 0xbf, 0x49, 0x4c, 0xd3, 0xa7, 0x26, 0x09, 0x69, 0xc3,
	0xf3, 0xdd, 0xd0, 0x95, 0xcb, 0x91, 0xbf, 0xb3, 0xe7, 0x53, 0xcf, 0x0d, 0x9a, 0x00, 0x74, 0xa3,
	0xd3, 0xa6, 0xe9, 0x9a, 0x2e, 0x04, 0xf0, 0x94, 0x10, 0xf1, 0xe7, 0x32, 0x92, 0x9e, 0xa5, 0xc9,
	0x96, 0xeb, 0xc8, 0x8f, 0xd0, 0x4a, 0x9f, 0x84, 0x54, 0x11, 0xea, 0xc2, 0xa1, 0xa8, 0x6f, 0xcf,
	0x62, 0x0d, 0xe2, 0x79, 0xac, 0xa1, 0x91, 0x3d, 0x38, 0xc2, 0x2c, 0xc0, 0x06, 0x60, 0x72, 0x03,
	0x55, 0x7a, 0x6e, 0xe4, 0x84, 0x4a, 0x19, 0xc8, 0xca, 0x2c, 0xd6, 0x12, 0x60, 0x1e, 0x6b, 0x12,
	0xb0, 0x21, 0xc2, 0x46, 0x82, 0xca, 0x4f, 0x50, 0x15, 0x1e, 0x4e, 0x5a, 0x8a, 0x08, 0x19, 0xbb,
	0xb3, 0x58, 0x4b, 0xa0, 0x61, 0x6b, 0x1e, 0x6b, 0xeb, 0x3c, 0x67, 0xd8, 0xc2, 0x46, 0x46, 0xe6,
	0x79, 0x6d, 0x65, 0x65, 0x31, 0xaf, 0xbd, 0x90, 0xd7, 0xce, 0xf3, 0xda, 0xf2, 0x5b, 0x84, 0x82,
	0x90, 0x84, 0x56, 0x10, 0x5a, 0xbd, 0x40, 0xa9, 0xd4, 0xc5, 0x43, 0xa9, 0xb5, 0xde, 0x88, 0xfc,
	0xc6, 0x9b, 0x0c, 0xd5, 0xf7, 0x27, 0xb1, 0x56, 0x9a, 0xc5, 0x5a, 0x81, 0x38, 0x8f, 0xb5, 0x7b,
	0x20, 0x98, 0x43, 0xd8, 0x28, 0xbc, 0xc6, 0x9f, 0x44, 0x54, 0xcb, 0x05, 0xe4, 0x03, 0x24, 0x9e,
	0xd3, 0x31, 0xd8, 0x55, 0xd3, 0xb7, 0x66, 0xb1, 0xc6, 0xc2, 0x79, 0xac, 0xd5, 0x40, 0xe2, 0x9c,
	0x8e, 0xb1, 0xc1, 0x10, 0xb9, 0x83, 0x2a, 0xa7, 0x03, 0x97, 0x24, 0x5e, 0x49, 0x2d, 0x99, 0xb5,
	0xf1, 0x9c, 0x01, 0xbc, 0x97, 0xdd, 0x49, 0xac, 0x09, 0xcc, 0x43, 0x20, 0xe6, 0x1e, 0x42, 0x84,
	0x3b, 0x25, 0x23, 0xc1, 0x65, 0x03, 0x55, 0x2d, 0x27, 0xa4, 0x26, 0xf5, 0xc1, 0x45, 0xa9, 0xb5,
	0xc5, 0xb4, 0x5e, 0x26, 0x10, 0x57, 0xab, 0xa7, 0x6a, 0x19, 0x39, 0xf7, 0x29, 0x8d, 0x99, 0x62,
	0xf6, 0x4e, 0x3e, 0x41, 0xb5, 0x33, 0x2b, 0x08, 0x5d, 0xd3, 0x27, 0x36, 0x78, 0x2c, 0xb5, 0x36,
	0x98, 0xea, 0x6b, 0xe2, 0x75, 0x32, 0x5c, 0x7f, 0x98, 0x2a, 0x72, 0x6a, 0x6e, 0x55, 0x8e, 0x30,
	0x55, 0xfe, 0x5e, 0xb6, 0xd1, 0xba, 0x4d, 0x3c, 0x8f, 0xf6, 0xd3, 0xf6, 0x94, 0x0a, 0x68, 0xdf,
	0x4f, 0xb5, 0x7f, 0x69, 0xfa, 0x71, 0x5a, 0x22, 0xcd, 0xe2, 0xad, 0x6f, 0x42, 0x99, 0x6b, 0x28,
	0x2b, 0x75, 0x5d, 0x5d, 0x97, 0x50, 0x8d, 0x2f, 0xed, 0x6b, 0x19, 0xfd, 0x7f, 0xdd, 0x61, 0xfe,
	0xc1, 0x0a, 0xcb, 0x7d, 0xb0, 0x07, 0x48, 0xb4, 0x2d, 0x07, 0x56, 0x26, 0x24, 0xcb, 0xb5, 0x2d,
	0x27, 0x5f, 0xae, 0x6d, 0x39, 0xd8, 0x60, 0x08, 0xf0, 0xc8, 0x08, 0xd6, 0x91, 0xf1, 0xc8, 0x88,
	0xf3, 0xc8, 0x88, 0xf1, 0xc8, 0x08, 0x78, 0xb4, 0x0f, 0x06, 0x67, 0x3c, 0xda, 0xe7, 0x3c, 0xda,
	0x67, 0x3c, 0xda, 0x97, 0x8f, 0x91, 0xe4, 0x51, 0xbf, 0x47, 0x9d, 0xd0, 0x1a, 0xd0, 0xe4, 0xcb,
	0x15, 0xf4, 0xbd, 0x59, 0xac, 0x15, 0xe1, 0x79, 0xac, 0x6d, 0x40, 0x1e, 0xc7, 0xb0, 0x51, 0x24,
	0xb0, 0x72, 0x41, 0x64, 0x2b, 0x55, 0x5e, 0x2e, 0x88, 0xec, 0xbc, 0x5c, 0x10, 0xd9, 0xd8, 0x60,
	0x08, 0xe3, 0x91, 0xa1, 0xa9, 0xac, 0x71, 0x1e, 0x19, 0x9a, 0x39, 0x8f, 0x0c, 0x4d, 0x6c, 0x30,
	0x04, 0x7f, 0x2b, 0xa3, 0x8d, 0xc5, 0x95, 0xfd, 0x8d, 0xa7, 0xe2, 0x92, 0x9e, 0x8a, 0xff, 0xc8,
	0x53, 0xf1, 0xee, 0x9e, 0xae, 0xf2, 0xb6, 0xfe, 0xe8, 0x69, 0xf5, 0x36, 0x4f, 0xbf, 0x08, 0xe8,
	0xbf, 0xe2, 0x29, 0x93, 0x8f, 0xd9, 0xdc, 0x9e, 0x22, 0xc0, 0x6d, 0xf5, 0x60, 0xf1, 0x10, 0xb2,
	0xe0, 0xd8, 0x09, 0xfd, 0xb1, 0xae, 0xa4, 0x37, 0x17, 0x63, 0x17, 0x6c, 0xf1, 0xc0, 0x16, 0x6f,
	0xe7, 0x14, 0xad, 0x65, 0xd4, 0xa5, 0xef, 0xa8, 0x06, 0xaa, 0x0c, 0xc9, 0x20, 0xa2, 0xc5, 0xfb,
	0x1c, 0x80, 0x7c, 0x95, 0x10, 0x61, 0x23, 0x41, 0x8f, 0xca, 0x4f, 0x05, 0xfc, 0x43, 0x40, 0x9b,
	0xbf, 0x39, 0xc9, 0xf2, 0xab, 0xe2, 0x18, 0xf5, 0x1b, 0xce, 0xfb, 0xd2, 0xd3, 0xbc, 0x17, 0xee,
	0x30, 0x4e, 0xa7, 0x38, 0xce, 0x4d, 0xd7, 0xe4, 0x6e, 0x5a, 0xf8, 0xb6, 0x41, 0xf5, 0x17, 0x93,
	0x4b, 0xb5, 0x74, 0x71, 0xa9, 0x96, 0x26, 0x57, 0xaa, 0x70, 0x71, 0xa5, 0x0a, 0x1f, 0xa6, 0x6a,
	0xe9, 0xe3, 0x54, 0x15, 0x2e, 0xa6, 0x6a, 0xe9, 0xfb, 0x54, 0x2d, 0xbd, 0xdb, 0x37, 0xad, 0xf0,
	0x2c, 0xea, 0x36, 0x7a, 0xae, 0xdd, 0x0c, 0xc6, 0x4e, 0x2f, 0x3c, 0xb3, 0x1c, 0xb3, 0xf0, 0x94,
	0xfc, 0xaa, 0xbb, 0xab, 0xf0, 0xe3, 0x6d, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x44, 0x7c, 0x96,
	0x01, 0xbb, 0x07, 0x00, 0x00,
}

func (m *Aggregation) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Aggregation) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Aggregation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for iNdEx := len(m.Statistics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statistics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAggregate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.CountV3 != 0 {
		i = encodeVarintAggregate(dAtA, i, uint64(m.CountV3))
		i--
		dAtA[i] = 0x20
	}
	if m.CountV2 != 0 {
		i = encodeVarintAggregate(dAtA, i, uint64(m.CountV2))
		i--
		dAtA[i] = 0x18
	}
	if m.Count != 0 {
		i = encodeVarintAggregate(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Date != 0 {
		i = encodeVarintAggregate(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Statistic) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Statistic) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Statistic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Statistic != nil {
		{
			size := m.Statistic.ProtoSize()
			i -= size
			if _, err := m.Statistic.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintAggregate(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Statistic_Float) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Statistic_Float) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Float != nil {
		{
			size, err := m.Float.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAggregate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Statistic_Integer) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Statistic_Integer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Integer != nil {
		{
			size, err := m.Integer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAggregate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Statistic_Histogram) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Statistic_Histogram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Histogram != nil {
		{
			size, err := m.Histogram.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAggregate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *Statistic_MappedInteger) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Statistic_MappedInteger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MappedInteger != nil {
		{
			size, err := m.MappedInteger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAggregate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *FloatStatistic) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FloatStatistic) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FloatStatistic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Avg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Avg))))
		i--
		dAtA[i] = 0x41
	}
	if m.Sum != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Sum))))
		i--
		dAtA[i] = 0x39
	}
	if len(m.Percentiles) > 0 {
		for iNdEx := len(m.Percentiles) - 1; iNdEx >= 0; iNdEx-- {
			f5 := math.Float64bits(float64(m.Percentiles[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f5))
		}
		i = encodeVarintAggregate(dAtA, i, uint64(len(m.Percentiles)*8))
		i--
		dAtA[i] = 0x2a
	}
	if m.Med != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Med))))
		i--
		dAtA[i] = 0x21
	}
	if m.Max != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Max))))
		i--
		dAtA[i] = 0x19
	}
	if m.Min != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Min))))
		i--
		dAtA[i] = 0x11
	}
	if m.Count != 0 {
		i = encodeVarintAggregate(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IntegerStatistic) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IntegerStatistic) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IntegerStatistic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Avg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Avg))))
		i--
		dAtA[i] = 0x39
	}
	if m.Sum != 0 {
		i = encodeVarintAggregate(dAtA, i, uint64(m.Sum))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Percentiles) > 0 {
		dAtA7 := make([]byte, len(m.Percentiles)*10)
		var j6 int
		for _, num1 := range m.Percentiles {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintAggregate(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x2a
	}
	if m.Med != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Med))))
		i--
		dAtA[i] = 0x21
	}
	if m.Max != 0 {
		i = encodeVarintAggregate(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x18
	}
	if m.Min != 0 {
		i = encodeVarintAggregate(dAtA, i, uint64(m.Min))
		i--
		dAtA[i] = 0x10
	}
	if m.Count != 0 {
		i = encodeVarintAggregate(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MapHistogram) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapHistogram) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapHistogram) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k := range m.Map {
			v := m.Map[k]
			baseI := i
			i = encodeVarintAggregate(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAggregate(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAggregate(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MapIntegerStatistic) Marshal() (dAtA []byte, err error) {
	size := m.ProtoSize()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapIntegerStatistic) MarshalTo(dAtA []byte) (int, error) {
	size := m.ProtoSize()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapIntegerStatistic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k := range m.Map {
			v := m.Map[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAggregate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAggregate(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAggregate(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAggregate(dAtA []byte, offset int, v uint64) int {
	offset -= sovAggregate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Aggregation) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Date != 0 {
		n += 1 + sovAggregate(uint64(m.Date))
	}
	if m.Count != 0 {
		n += 1 + sovAggregate(uint64(m.Count))
	}
	if m.CountV2 != 0 {
		n += 1 + sovAggregate(uint64(m.CountV2))
	}
	if m.CountV3 != 0 {
		n += 1 + sovAggregate(uint64(m.CountV3))
	}
	if len(m.Statistics) > 0 {
		for _, e := range m.Statistics {
			l = e.ProtoSize()
			n += 1 + l + sovAggregate(uint64(l))
		}
	}
	return n
}

func (m *Statistic) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovAggregate(uint64(l))
	}
	if m.Statistic != nil {
		n += m.Statistic.ProtoSize()
	}
	return n
}

func (m *Statistic_Float) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Float != nil {
		l = m.Float.ProtoSize()
		n += 1 + l + sovAggregate(uint64(l))
	}
	return n
}
func (m *Statistic_Integer) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Integer != nil {
		l = m.Integer.ProtoSize()
		n += 1 + l + sovAggregate(uint64(l))
	}
	return n
}
func (m *Statistic_Histogram) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Histogram != nil {
		l = m.Histogram.ProtoSize()
		n += 1 + l + sovAggregate(uint64(l))
	}
	return n
}
func (m *Statistic_MappedInteger) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MappedInteger != nil {
		l = m.MappedInteger.ProtoSize()
		n += 1 + l + sovAggregate(uint64(l))
	}
	return n
}
func (m *FloatStatistic) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovAggregate(uint64(m.Count))
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if m.Med != 0 {
		n += 9
	}
	if len(m.Percentiles) > 0 {
		n += 1 + sovAggregate(uint64(len(m.Percentiles)*8)) + len(m.Percentiles)*8
	}
	if m.Sum != 0 {
		n += 9
	}
	if m.Avg != 0 {
		n += 9
	}
	return n
}

func (m *IntegerStatistic) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovAggregate(uint64(m.Count))
	}
	if m.Min != 0 {
		n += 1 + sovAggregate(uint64(m.Min))
	}
	if m.Max != 0 {
		n += 1 + sovAggregate(uint64(m.Max))
	}
	if m.Med != 0 {
		n += 9
	}
	if len(m.Percentiles) > 0 {
		l = 0
		for _, e := range m.Percentiles {
			l += sovAggregate(uint64(e))
		}
		n += 1 + sovAggregate(uint64(l)) + l
	}
	if m.Sum != 0 {
		n += 1 + sovAggregate(uint64(m.Sum))
	}
	if m.Avg != 0 {
		n += 9
	}
	return n
}

func (m *MapHistogram) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAggregate(uint64(len(k))) + 1 + sovAggregate(uint64(v))
			n += mapEntrySize + 1 + sovAggregate(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MapIntegerStatistic) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Map) > 0 {
		for k, v := range m.Map {
			_ = k
			_ = v
			l = v.ProtoSize()
			mapEntrySize := 1 + len(k) + sovAggregate(uint64(len(k))) + 1 + l + sovAggregate(uint64(l))
			n += mapEntrySize + 1 + sovAggregate(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAggregate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAggregate(x uint64) (n int) {
	return sovAggregate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Aggregation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Aggregation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Aggregation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountV2", wireType)
			}
			m.CountV2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountV2 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountV3", wireType)
			}
			m.CountV3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountV3 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggregate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAggregate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statistics = append(m.Statistics, Statistic{})
			if err := m.Statistics[len(m.Statistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggregate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAggregate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Statistic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Statistic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Statistic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAggregate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAggregate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggregate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAggregate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FloatStatistic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Statistic = &Statistic_Float{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Integer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggregate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAggregate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &IntegerStatistic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Statistic = &Statistic_Integer{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Histogram", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggregate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAggregate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MapHistogram{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Statistic = &Statistic_Histogram{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappedInteger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggregate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAggregate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MapIntegerStatistic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Statistic = &Statistic_MappedInteger{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggregate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAggregate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FloatStatistic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FloatStatistic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FloatStatistic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Min = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Max = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Med", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Med = float64(math.Float64frombits(v))
		case 5:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Percentiles = append(m.Percentiles, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAggregate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAggregate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAggregate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Percentiles) == 0 {
					m.Percentiles = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Percentiles = append(m.Percentiles, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentiles", wireType)
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Sum = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Avg = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAggregate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAggregate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IntegerStatistic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IntegerStatistic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IntegerStatistic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Med", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Med = float64(math.Float64frombits(v))
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAggregate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Percentiles = append(m.Percentiles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAggregate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAggregate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAggregate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Percentiles) == 0 {
					m.Percentiles = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAggregate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Percentiles = append(m.Percentiles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Percentiles", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			m.Sum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Avg = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAggregate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAggregate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapHistogram) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapHistogram: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapHistogram: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggregate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAggregate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAggregate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAggregate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAggregate
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAggregate
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAggregate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAggregate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAggregate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Map[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggregate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAggregate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapIntegerStatistic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAggregate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapIntegerStatistic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapIntegerStatistic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAggregate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAggregate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = make(map[string]IntegerStatistic)
			}
			var mapkey string
			mapvalue := &IntegerStatistic{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAggregate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAggregate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAggregate
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAggregate
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAggregate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAggregate
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAggregate
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &IntegerStatistic{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAggregate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAggregate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Map[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAggregate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAggregate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAggregate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAggregate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAggregate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAggregate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAggregate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAggregate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAggregate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAggregate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAggregate = fmt.Errorf("proto: unexpected end of group")
)
