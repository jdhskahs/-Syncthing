// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/fs/encoders.proto

package fs

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FilesystemEncoderType int32

const (
	// The Passthrough encoder type has a value of 0, as it will be the
	// default when a new Filesystem or BasicFilesystem is instantiated.
	FilesystemEncoderTypePassthrough FilesystemEncoderType = 0
	FilesystemEncoderTypeStandard    FilesystemEncoderType = 1
	FilesystemEncoderTypeFat         FilesystemEncoderType = 2
)

var FilesystemEncoderType_name = map[int32]string{
	0: "FILESYSTEM_ENCODER_TYPE_PASSTHROUGH",
	1: "FILESYSTEM_ENCODER_TYPE_STANDARD",
	2: "FILESYSTEM_ENCODER_TYPE_FAT",
}

var FilesystemEncoderType_value = map[string]int32{
	"FILESYSTEM_ENCODER_TYPE_PASSTHROUGH": 0,
	"FILESYSTEM_ENCODER_TYPE_STANDARD":    1,
	"FILESYSTEM_ENCODER_TYPE_FAT":         2,
}

func (FilesystemEncoderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_86550ce9a376d98b, []int{0}
}

func init() {
	proto.RegisterEnum("fs.FilesystemEncoderType", FilesystemEncoderType_name, FilesystemEncoderType_value)
}

func init() { proto.RegisterFile("lib/fs/encoders.proto", fileDescriptor_86550ce9a376d98b) }

var fileDescriptor_86550ce9a376d98b = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0xc9, 0x4c, 0xd2,
	0x4f, 0x2b, 0xd6, 0x4f, 0xcd, 0x4b, 0xce, 0x4f, 0x49, 0x2d, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x4a, 0x2b, 0x96, 0x52, 0x2e, 0x4a, 0x2d, 0xc8, 0x2f, 0xd6, 0x07, 0x0b, 0x24,
	0x95, 0xa6, 0xe9, 0xa7, 0xe7, 0xa7, 0xe7, 0x83, 0x39, 0x60, 0x16, 0x44, 0xa1, 0xd6, 0x17, 0x46,
	0x2e, 0x51, 0xb7, 0xcc, 0x9c, 0xd4, 0xe2, 0xca, 0xe2, 0x92, 0xd4, 0x5c, 0x57, 0x88, 0x29, 0x21,
	0x95, 0x05, 0xa9, 0x42, 0xbe, 0x5c, 0xca, 0x6e, 0x9e, 0x3e, 0xae, 0xc1, 0x91, 0xc1, 0x21, 0xae,
	0xbe, 0xf1, 0xae, 0x7e, 0xce, 0xfe, 0x2e, 0xae, 0x41, 0xf1, 0x21, 0x91, 0x01, 0xae, 0xf1, 0x01,
	0x8e, 0xc1, 0xc1, 0x21, 0x1e, 0x41, 0xfe, 0xa1, 0xee, 0x1e, 0x02, 0x0c, 0x52, 0x2a, 0x5d, 0x73,
	0x15, 0x14, 0xb0, 0x9a, 0x11, 0x90, 0x58, 0x5c, 0x5c, 0x92, 0x51, 0x94, 0x5f, 0x9a, 0x9e, 0x21,
	0xe4, 0xce, 0xa5, 0x80, 0xcb, 0xb8, 0xe0, 0x10, 0x47, 0x3f, 0x17, 0xc7, 0x20, 0x17, 0x01, 0x46,
	0x29, 0xc5, 0xae, 0xb9, 0x0a, 0xb2, 0x58, 0xcd, 0x0a, 0x2e, 0x49, 0xcc, 0x4b, 0x49, 0x2c, 0x4a,
	0x11, 0xb2, 0xe5, 0x92, 0xc6, 0x65, 0x90, 0x9b, 0x63, 0x88, 0x00, 0x93, 0x94, 0x4c, 0xd7, 0x5c,
	0x05, 0x09, 0xac, 0x66, 0xb8, 0x25, 0x96, 0x48, 0xb1, 0xac, 0x58, 0x22, 0xc7, 0xe0, 0xe4, 0x7e,
	0xe2, 0xa1, 0x1c, 0xc3, 0x85, 0x87, 0x72, 0x0c, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7,
	0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x82, 0xc7, 0x72, 0x8c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c,
	0xc7, 0x10, 0xa5, 0x9a, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x5f, 0x5c,
	0x99, 0x97, 0x5c, 0x92, 0x91, 0x99, 0x97, 0x8e, 0xc4, 0x82, 0x84, 0x7b, 0x12, 0x1b, 0x38, 0x18,
	0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00, 0xbe, 0x01, 0xa8, 0x88, 0x01, 0x00, 0x00,
}
