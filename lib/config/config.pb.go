// // Code generated by protoc-gen-gogo. DO NOT EDIT.
// // source: config.proto
// 
// package config
// 
// import (
// 	fmt "fmt"
// 	_ "github.com/gogo/protobuf/gogoproto"
// 	proto "github.com/gogo/protobuf/proto"
// 	io "io"
// 	math "math"
// 	math_bits "math/bits"
// )
// 
// // Reference imports to suppress errors if they are not otherwise used.
// var _ = proto.Marshal
// var _ = fmt.Errorf
// var _ = math.Inf
// 
// // This is a compile-time assertion to ensure that this generated file
// // is compatible with the proto package it is being compiled against.
// // A compilation error at this line likely means your copy of the
// // proto package needs to be updated.
// const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package
// 
// type FolderConfiguration struct {
// 	//
// 	//ID                      string                      `xml:"id,attr" json:"id"`
// 	//Label                   string                      `xml:"label,attr" json:"label" restart:"false"`
// 	//FilesystemType          fs.FilesystemType           `xml:"filesystemType" json:"filesystemType"`
// 	//Path                    string                      `xml:"path,attr" json:"path"`
// 	//Type                    FolderType                  `xml:"type,attr" json:"type"`
// 	//Devices                 []FolderDeviceConfiguration `xml:"device" json:"devices"`
// 	//RescanIntervalS         int                         `xml:"rescanIntervalS,attr" json:"rescanIntervalS" default:"3600"`
// 	//FSWatcherEnabled        bool                        `xml:"fsWatcherEnabled,attr" json:"fsWatcherEnabled" default:"true"`
// 	//FSWatcherDelayS         int                         `xml:"fsWatcherDelayS,attr" json:"fsWatcherDelayS" default:"10"`
// 	//IgnorePerms             bool                        `xml:"ignorePerms,attr" json:"ignorePerms"`
// 	//AutoNormalize           bool                        `xml:"autoNormalize,attr" json:"autoNormalize" default:"true"`
// 	//MinDiskFree             Size                        `xml:"minDiskFree" json:"minDiskFree" default:"1%"`
// 	//Versioning              VersioningConfiguration     `xml:"versioning" json:"versioning"`
// 	//Copiers                 int                         `xml:"copiers" json:"copiers"` // This defines how many files are handled concurrently.
// 	//PullerMaxPendingKiB     int                         `xml:"pullerMaxPendingKiB" json:"pullerMaxPendingKiB"`
// 	//Hashers                 int                         `xml:"hashers" json:"hashers"` // Less than one sets the value to the number of cores. These are CPU bound due to hashing.
// 	//Order                   PullOrder                   `xml:"order" json:"order"`
// 	//IgnoreDelete            bool                        `xml:"ignoreDelete" json:"ignoreDelete"`
// 	//ScanProgressIntervalS   int                         `xml:"scanProgressIntervalS" json:"scanProgressIntervalS"` // Set to a negative value to disable. Value of 0 will get replaced with value of 2 (default value)
// 	//PullerPauseS            int                         `xml:"pullerPauseS" json:"pullerPauseS"`
// 	//MaxConflicts            int                         `xml:"maxConflicts" json:"maxConflicts" default:"-1"`
// 	//DisableSparseFiles      bool                        `xml:"disableSparseFiles" json:"disableSparseFiles"`
// 	//DisableTempIndexes      bool                        `xml:"disableTempIndexes" json:"disableTempIndexes"`
// 	//Paused                  bool                        `xml:"paused" json:"paused"`
// 	//WeakHashThresholdPct    int                         `xml:"weakHashThresholdPct" json:"weakHashThresholdPct"` // Use weak hash if more than X percent of the file has changed. Set to -1 to always use weak hash.
// 	//MarkerName              string                      `xml:"markerName" json:"markerName"`
// 	//CopyOwnershipFromParent bool                        `xml:"copyOwnershipFromParent" json:"copyOwnershipFromParent"`
// 	//RawModTimeWindowS       int                         `xml:"modTimeWindowS" json:"modTimeWindowS"`
// 	//MaxConcurrentWrites     int                         `xml:"maxConcurrentWrites" json:"maxConcurrentWrites" default:"2"`
// 	//DisableFsync            bool                        `xml:"disableFsync" json:"disableFsync"`
// 	//BlockPullOrder          BlockPullOrder              `xml:"blockPullOrder" json:"blockPullOrder"`
// 	//CopyRangeMethod         fs.CopyRangeMethod          `xml:"copyRangeMethod" json:"copyRangeMethod" default:"standard"`
// 	//CaseSensitiveFS         bool                        `xml:"caseSensitiveFS" json:"caseSensitiveFS"`
// 	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
// 	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
// }
// 
// func (m *FolderConfiguration) Reset()         { *m = FolderConfiguration{} }
// func (m *FolderConfiguration) String() string { return proto.CompactTextString(m) }
// func (*FolderConfiguration) ProtoMessage()    {}
// func (*FolderConfiguration) Descriptor() ([]byte, []int) {
// 	return fileDescriptor_3eaf2c85e69e9ea4, []int{0}
// }
// func (m *FolderConfiguration) XXX_Unmarshal(b []byte) error {
// 	return m.Unmarshal(b)
// }
// func (m *FolderConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
// 	if deterministic {
// 		return xxx_messageInfo_FolderConfiguration.Marshal(b, m, deterministic)
// 	} else {
// 		b = b[:cap(b)]
// 		n, err := m.MarshalToSizedBuffer(b)
// 		if err != nil {
// 			return nil, err
// 		}
// 		return b[:n], nil
// 	}
// }
// func (m *FolderConfiguration) XXX_Merge(src proto.Message) {
// 	xxx_messageInfo_FolderConfiguration.Merge(m, src)
// }
// func (m *FolderConfiguration) XXX_Size() int {
// 	return m.ProtoSize()
// }
// func (m *FolderConfiguration) XXX_DiscardUnknown() {
// 	xxx_messageInfo_FolderConfiguration.DiscardUnknown(m)
// }
// 
// var xxx_messageInfo_FolderConfiguration proto.InternalMessageInfo
// 
// type DeviceConfiguration struct {
// }
// 
// func (m *DeviceConfiguration) Reset()         { *m = DeviceConfiguration{} }
// func (m *DeviceConfiguration) String() string { return proto.CompactTextString(m) }
// func (*DeviceConfiguration) ProtoMessage()    {}
// func (*DeviceConfiguration) Descriptor() ([]byte, []int) {
// 	return fileDescriptor_3eaf2c85e69e9ea4, []int{1}
// }
// func (m *DeviceConfiguration) XXX_Unmarshal(b []byte) error {
// 	return m.Unmarshal(b)
// }
// func (m *DeviceConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
// 	if deterministic {
// 		return xxx_messageInfo_DeviceConfiguration.Marshal(b, m, deterministic)
// 	} else {
// 		b = b[:cap(b)]
// 		n, err := m.MarshalToSizedBuffer(b)
// 		if err != nil {
// 			return nil, err
// 		}
// 		return b[:n], nil
// 	}
// }
// func (m *DeviceConfiguration) XXX_Merge(src proto.Message) {
// 	xxx_messageInfo_DeviceConfiguration.Merge(m, src)
// }
// func (m *DeviceConfiguration) XXX_Size() int {
// 	return m.ProtoSize()
// }
// func (m *DeviceConfiguration) XXX_DiscardUnknown() {
// 	xxx_messageInfo_DeviceConfiguration.DiscardUnknown(m)
// }
// 
// var xxx_messageInfo_DeviceConfiguration proto.InternalMessageInfo
// 
// type GUIConfiguration struct {
// }
// 
// func (m *GUIConfiguration) Reset()         { *m = GUIConfiguration{} }
// func (m *GUIConfiguration) String() string { return proto.CompactTextString(m) }
// func (*GUIConfiguration) ProtoMessage()    {}
// func (*GUIConfiguration) Descriptor() ([]byte, []int) {
// 	return fileDescriptor_3eaf2c85e69e9ea4, []int{2}
// }
// func (m *GUIConfiguration) XXX_Unmarshal(b []byte) error {
// 	return m.Unmarshal(b)
// }
// func (m *GUIConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
// 	if deterministic {
// 		return xxx_messageInfo_GUIConfiguration.Marshal(b, m, deterministic)
// 	} else {
// 		b = b[:cap(b)]
// 		n, err := m.MarshalToSizedBuffer(b)
// 		if err != nil {
// 			return nil, err
// 		}
// 		return b[:n], nil
// 	}
// }
// func (m *GUIConfiguration) XXX_Merge(src proto.Message) {
// 	xxx_messageInfo_GUIConfiguration.Merge(m, src)
// }
// func (m *GUIConfiguration) XXX_Size() int {
// 	return m.ProtoSize()
// }
// func (m *GUIConfiguration) XXX_DiscardUnknown() {
// 	xxx_messageInfo_GUIConfiguration.DiscardUnknown(m)
// }
// 
// var xxx_messageInfo_GUIConfiguration proto.InternalMessageInfo
// 
// type LDAPConfiguration struct {
// }
// 
// func (m *LDAPConfiguration) Reset()         { *m = LDAPConfiguration{} }
// func (m *LDAPConfiguration) String() string { return proto.CompactTextString(m) }
// func (*LDAPConfiguration) ProtoMessage()    {}
// func (*LDAPConfiguration) Descriptor() ([]byte, []int) {
// 	return fileDescriptor_3eaf2c85e69e9ea4, []int{3}
// }
// func (m *LDAPConfiguration) XXX_Unmarshal(b []byte) error {
// 	return m.Unmarshal(b)
// }
// func (m *LDAPConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
// 	if deterministic {
// 		return xxx_messageInfo_LDAPConfiguration.Marshal(b, m, deterministic)
// 	} else {
// 		b = b[:cap(b)]
// 		n, err := m.MarshalToSizedBuffer(b)
// 		if err != nil {
// 			return nil, err
// 		}
// 		return b[:n], nil
// 	}
// }
// func (m *LDAPConfiguration) XXX_Merge(src proto.Message) {
// 	xxx_messageInfo_LDAPConfiguration.Merge(m, src)
// }
// func (m *LDAPConfiguration) XXX_Size() int {
// 	return m.ProtoSize()
// }
// func (m *LDAPConfiguration) XXX_DiscardUnknown() {
// 	xxx_messageInfo_LDAPConfiguration.DiscardUnknown(m)
// }
// 
// var xxx_messageInfo_LDAPConfiguration proto.InternalMessageInfo
// 
// type OptionsConfiguration struct {
// }
// 
// func (m *OptionsConfiguration) Reset()         { *m = OptionsConfiguration{} }
// func (m *OptionsConfiguration) String() string { return proto.CompactTextString(m) }
// func (*OptionsConfiguration) ProtoMessage()    {}
// func (*OptionsConfiguration) Descriptor() ([]byte, []int) {
// 	return fileDescriptor_3eaf2c85e69e9ea4, []int{4}
// }
// func (m *OptionsConfiguration) XXX_Unmarshal(b []byte) error {
// 	return m.Unmarshal(b)
// }
// func (m *OptionsConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
// 	if deterministic {
// 		return xxx_messageInfo_OptionsConfiguration.Marshal(b, m, deterministic)
// 	} else {
// 		b = b[:cap(b)]
// 		n, err := m.MarshalToSizedBuffer(b)
// 		if err != nil {
// 			return nil, err
// 		}
// 		return b[:n], nil
// 	}
// }
// func (m *OptionsConfiguration) XXX_Merge(src proto.Message) {
// 	xxx_messageInfo_OptionsConfiguration.Merge(m, src)
// }
// func (m *OptionsConfiguration) XXX_Size() int {
// 	return m.ProtoSize()
// }
// func (m *OptionsConfiguration) XXX_DiscardUnknown() {
// 	xxx_messageInfo_OptionsConfiguration.DiscardUnknown(m)
// }
// 
// var xxx_messageInfo_OptionsConfiguration proto.InternalMessageInfo
// 
// type ObservedDevice struct {
// }
// 
// func (m *ObservedDevice) Reset()         { *m = ObservedDevice{} }
// func (m *ObservedDevice) String() string { return proto.CompactTextString(m) }
// func (*ObservedDevice) ProtoMessage()    {}
// func (*ObservedDevice) Descriptor() ([]byte, []int) {
// 	return fileDescriptor_3eaf2c85e69e9ea4, []int{5}
// }
// func (m *ObservedDevice) XXX_Unmarshal(b []byte) error {
// 	return m.Unmarshal(b)
// }
// func (m *ObservedDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
// 	if deterministic {
// 		return xxx_messageInfo_ObservedDevice.Marshal(b, m, deterministic)
// 	} else {
// 		b = b[:cap(b)]
// 		n, err := m.MarshalToSizedBuffer(b)
// 		if err != nil {
// 			return nil, err
// 		}
// 		return b[:n], nil
// 	}
// }
// func (m *ObservedDevice) XXX_Merge(src proto.Message) {
// 	xxx_messageInfo_ObservedDevice.Merge(m, src)
// }
// func (m *ObservedDevice) XXX_Size() int {
// 	return m.ProtoSize()
// }
// func (m *ObservedDevice) XXX_DiscardUnknown() {
// 	xxx_messageInfo_ObservedDevice.DiscardUnknown(m)
// }
// 
// var xxx_messageInfo_ObservedDevice proto.InternalMessageInfo
// 
// type Configuration struct {
// 	Version        int32                 `protobuf:"varint,1,opt,name=version,proto3" json:"version" xml:"version,attr"`
// 	Folders        []FolderConfiguration `protobuf:"bytes,2,rep,name=folders,proto3" json:"folders" xml:"folder"`
// 	Devices        []DeviceConfiguration `protobuf:"bytes,3,rep,name=devices,proto3" json:"devices" xml:"device"`
// 	Gui            GUIConfiguration      `protobuf:"bytes,4,opt,name=gui,proto3" json:"gui" xml:"gui"`
// 	Ldap           LDAPConfiguration     `protobuf:"bytes,5,opt,name=ldap,proto3" json:"ldap" xml:"ldap"`
// 	Options        OptionsConfiguration  `protobuf:"bytes,6,opt,name=options,proto3" json:"options" xml:"options"`
// 	IgnoredDevices []ObservedDevice      `protobuf:"bytes,7,rep,name=ignored_devices,json=ignoredDevices,proto3" json:"remoteIgnoredDevices" xml:"remoteIgnoredDevice"`
// 	PendingDevices []ObservedDevice      `protobuf:"bytes,8,rep,name=pending_devices,json=pendingDevices,proto3" json:"pendingDevices" xml:"pendingDevice"`
// }
// 
// func (m *Configuration) Reset()         { *m = Configuration{} }
// func (m *Configuration) String() string { return proto.CompactTextString(m) }
// func (*Configuration) ProtoMessage()    {}
// func (*Configuration) Descriptor() ([]byte, []int) {
// 	return fileDescriptor_3eaf2c85e69e9ea4, []int{6}
// }
// func (m *Configuration) XXX_Unmarshal(b []byte) error {
// 	return m.Unmarshal(b)
// }
// func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
// 	if deterministic {
// 		return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
// 	} else {
// 		b = b[:cap(b)]
// 		n, err := m.MarshalToSizedBuffer(b)
// 		if err != nil {
// 			return nil, err
// 		}
// 		return b[:n], nil
// 	}
// }
// func (m *Configuration) XXX_Merge(src proto.Message) {
// 	xxx_messageInfo_Configuration.Merge(m, src)
// }
// func (m *Configuration) XXX_Size() int {
// 	return m.ProtoSize()
// }
// func (m *Configuration) XXX_DiscardUnknown() {
// 	xxx_messageInfo_Configuration.DiscardUnknown(m)
// }
// 
// var xxx_messageInfo_Configuration proto.InternalMessageInfo
// 
// func init() {
// 	proto.RegisterType((*FolderConfiguration)(nil), "config.FolderConfiguration")
// 	proto.RegisterType((*DeviceConfiguration)(nil), "config.DeviceConfiguration")
// 	proto.RegisterType((*GUIConfiguration)(nil), "config.GUIConfiguration")
// 	proto.RegisterType((*LDAPConfiguration)(nil), "config.LDAPConfiguration")
// 	proto.RegisterType((*OptionsConfiguration)(nil), "config.OptionsConfiguration")
// 	proto.RegisterType((*ObservedDevice)(nil), "config.ObservedDevice")
// 	proto.RegisterType((*Configuration)(nil), "config.Configuration")
// }
// 
// func init() { proto.RegisterFile("config.proto", fileDescriptor_3eaf2c85e69e9ea4) }
// 
// var fileDescriptor_3eaf2c85e69e9ea4 = []byte{
// 	// 496 bytes of a gzipped FileDescriptorProto
// 	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x41, 0x6f, 0xd3, 0x3e,
// 	0x18, 0xc6, 0x93, 0x76, 0x6d, 0xff, 0x7b, 0xb7, 0x75, 0x9b, 0xdb, 0x4d, 0xd9, 0x1f, 0xe4, 0x14,
// 	0x73, 0xe9, 0x01, 0x36, 0x69, 0x9c, 0x60, 0xe2, 0xb0, 0x30, 0x81, 0x26, 0x40, 0x43, 0x91, 0x38,
// 	0xa3, 0x76, 0x71, 0x23, 0x4b, 0x59, 0x1c, 0x25, 0x69, 0x85, 0xf8, 0x14, 0x7c, 0x04, 0x24, 0xbe,
// 	0x4c, 0x8f, 0x3d, 0x72, 0x8a, 0x58, 0x7b, 0x41, 0x3b, 0xf6, 0x13, 0xa0, 0xbc, 0x8e, 0x87, 0x5c,
// 	0x2a, 0x6e, 0x7e, 0x1f, 0xfb, 0xf9, 0x3d, 0xce, 0x63, 0x05, 0xb6, 0xaf, 0x65, 0x3c, 0x12, 0xe1,
// 	0x71, 0x92, 0xca, 0x5c, 0x92, 0xa6, 0x9a, 0xfe, 0x7f, 0x9c, 0xf2, 0x44, 0x66, 0x27, 0x28, 0x0e,
// 	0xc7, 0xa3, 0x93, 0x50, 0x86, 0x12, 0x07, 0x5c, 0xa9, 0xc3, 0xec, 0x0c, 0x3a, 0xaf, 0x65, 0x14,
// 	0xf0, 0xf4, 0x15, 0x9a, 0xc6, 0xe9, 0x20, 0x17, 0x32, 0x26, 0x6d, 0xa8, 0x89, 0xc0, 0xb1, 0x7b,
// 	0x76, 0x7f, 0xd3, 0xaf, 0x89, 0x80, 0x74, 0xa1, 0x11, 0x0d, 0x86, 0x3c, 0x72, 0x6a, 0x28, 0xa9,
// 	0x81, 0x1d, 0x40, 0xe7, 0x82, 0x4f, 0xc4, 0x35, 0x37, 0xcc, 0x8c, 0xc0, 0xde, 0x9b, 0x8f, 0x97,
// 	0xa6, 0xd6, 0x81, 0xfd, 0x77, 0x17, 0xe7, 0x1f, 0x4c, 0xf1, 0x10, 0xba, 0x57, 0x49, 0xb9, 0xca,
// 	0x4c, 0x7d, 0x0f, 0xda, 0x57, 0xc3, 0x8c, 0xa7, 0x13, 0x1e, 0x28, 0x3e, 0xfb, 0xde, 0x80, 0x1d,
// 	0xf3, 0x86, 0x67, 0xd0, 0x9a, 0xf0, 0x34, 0x13, 0x32, 0xc6, 0x6b, 0x36, 0xbc, 0x47, 0x77, 0x85,
// 	0xab, 0xa5, 0x65, 0xe1, 0x92, 0xcf, 0x37, 0xd1, 0x0b, 0x56, 0xcd, 0x4f, 0x06, 0x79, 0x9e, 0x32,
// 	0x5f, 0x6f, 0x93, 0xb7, 0xd0, 0x1a, 0xe1, 0x57, 0x67, 0x4e, 0xad, 0x57, 0xef, 0x6f, 0x9d, 0x3e,
// 	0x38, 0xae, 0x2a, 0x5c, 0x53, 0x86, 0xd7, 0x9d, 0x16, 0xae, 0xb5, 0x2c, 0xdc, 0x6d, 0x44, 0x2a,
// 	0x23, 0xf3, 0x35, 0xa1, 0x84, 0x05, 0x78, 0xcb, 0xcc, 0xa9, 0x9b, 0xb0, 0x35, 0xe5, 0xac, 0xc0,
// 	0x94, 0x91, 0xf9, 0x9a, 0x40, 0x5e, 0x42, 0x3d, 0x1c, 0x0b, 0x67, 0xa3, 0x67, 0xf7, 0xb7, 0x4e,
// 	0x1d, 0x0d, 0x5a, 0xad, 0xd3, 0xdb, 0xaf, 0x28, 0x9b, 0x48, 0x09, 0xc7, 0x82, 0xf9, 0xa5, 0x8f,
// 	0x9c, 0xc3, 0x46, 0x14, 0x0c, 0x12, 0xa7, 0x81, 0xfe, 0x23, 0xed, 0xff, 0xab, 0x7a, 0x8f, 0x54,
// 	0x00, 0x40, 0x40, 0xe9, 0x61, 0x3e, 0x5a, 0xc9, 0x7b, 0x68, 0x49, 0xf5, 0x28, 0x4e, 0x13, 0x29,
// 	0x0f, 0x35, 0x65, 0xdd, 0x5b, 0x79, 0x07, 0x15, 0x68, 0x07, 0x41, 0x95, 0x93, 0xf9, 0x9a, 0x41,
// 	0xbe, 0xc0, 0xae, 0x08, 0x63, 0x99, 0xf2, 0xe0, 0x93, 0x6e, 0xa9, 0x85, 0x2d, 0x1d, 0xde, 0x63,
// 	0x8d, 0xa7, 0xf6, 0x9e, 0x97, 0xc0, 0xbb, 0xc2, 0xed, 0xa6, 0xfc, 0x46, 0xe6, 0xfc, 0x52, 0x99,
// 	0xd5, 0x66, 0xb6, 0x2c, 0xdc, 0x23, 0x0c, 0x5a, 0xb3, 0xc9, 0xfc, 0xb6, 0x30, 0x0e, 0x93, 0x18,
// 	0x76, 0x13, 0x1e, 0x07, 0x22, 0x0e, 0xef, 0xb3, 0xff, 0xfb, 0x67, 0xf6, 0xd3, 0x2a, 0xbb, 0x5d,
// 	0xd9, 0xfe, 0xa4, 0x76, 0x30, 0xd5, 0x90, 0x99, 0xbf, 0x72, 0xcc, 0xeb, 0x4f, 0x6f, 0xa9, 0x35,
// 	0xbb, 0xa5, 0xd6, 0x74, 0x4e, 0xed, 0xd9, 0x9c, 0xda, 0x3f, 0xe7, 0xd4, 0xfa, 0x35, 0xa7, 0xf6,
// 	0xd7, 0x05, 0xb5, 0xbe, 0x2d, 0xa8, 0x3d, 0x5b, 0x50, 0xeb, 0xc7, 0x82, 0x5a, 0xc3, 0x26, 0xfe,
// 	0x7d, 0xcf, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x03, 0x4c, 0x0e, 0x52, 0xba, 0x03, 0x00, 0x00,
// }
// 
// func (m *FolderConfiguration) Marshal() (dAtA []byte, err error) {
// 	size := m.ProtoSize()
// 	dAtA = make([]byte, size)
// 	n, err := m.MarshalToSizedBuffer(dAtA[:size])
// 	if err != nil {
// 		return nil, err
// 	}
// 	return dAtA[:n], nil
// }
// 
// func (m *FolderConfiguration) MarshalTo(dAtA []byte) (int, error) {
// 	size := m.ProtoSize()
// 	return m.MarshalToSizedBuffer(dAtA[:size])
// }
// 
// func (m *FolderConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
// 	i := len(dAtA)
// 	_ = i
// 	var l int
// 	_ = l
// 	if len(m.Label) > 0 {
// 		i -= len(m.Label)
// 		copy(dAtA[i:], m.Label)
// 		i = encodeVarintConfig(dAtA, i, uint64(len(m.Label)))
// 		i--
// 		dAtA[i] = 0x12
// 	}
// 	if len(m.Id) > 0 {
// 		i -= len(m.Id)
// 		copy(dAtA[i:], m.Id)
// 		i = encodeVarintConfig(dAtA, i, uint64(len(m.Id)))
// 		i--
// 		dAtA[i] = 0xa
// 	}
// 	return len(dAtA) - i, nil
// }
// 
// func (m *DeviceConfiguration) Marshal() (dAtA []byte, err error) {
// 	size := m.ProtoSize()
// 	dAtA = make([]byte, size)
// 	n, err := m.MarshalToSizedBuffer(dAtA[:size])
// 	if err != nil {
// 		return nil, err
// 	}
// 	return dAtA[:n], nil
// }
// 
// func (m *DeviceConfiguration) MarshalTo(dAtA []byte) (int, error) {
// 	size := m.ProtoSize()
// 	return m.MarshalToSizedBuffer(dAtA[:size])
// }
// 
// func (m *DeviceConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
// 	i := len(dAtA)
// 	_ = i
// 	var l int
// 	_ = l
// 	return len(dAtA) - i, nil
// }
// 
// func (m *GUIConfiguration) Marshal() (dAtA []byte, err error) {
// 	size := m.ProtoSize()
// 	dAtA = make([]byte, size)
// 	n, err := m.MarshalToSizedBuffer(dAtA[:size])
// 	if err != nil {
// 		return nil, err
// 	}
// 	return dAtA[:n], nil
// }
// 
// func (m *GUIConfiguration) MarshalTo(dAtA []byte) (int, error) {
// 	size := m.ProtoSize()
// 	return m.MarshalToSizedBuffer(dAtA[:size])
// }
// 
// func (m *GUIConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
// 	i := len(dAtA)
// 	_ = i
// 	var l int
// 	_ = l
// 	return len(dAtA) - i, nil
// }
// 
// func (m *LDAPConfiguration) Marshal() (dAtA []byte, err error) {
// 	size := m.ProtoSize()
// 	dAtA = make([]byte, size)
// 	n, err := m.MarshalToSizedBuffer(dAtA[:size])
// 	if err != nil {
// 		return nil, err
// 	}
// 	return dAtA[:n], nil
// }
// 
// func (m *LDAPConfiguration) MarshalTo(dAtA []byte) (int, error) {
// 	size := m.ProtoSize()
// 	return m.MarshalToSizedBuffer(dAtA[:size])
// }
// 
// func (m *LDAPConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
// 	i := len(dAtA)
// 	_ = i
// 	var l int
// 	_ = l
// 	return len(dAtA) - i, nil
// }
// 
// func (m *OptionsConfiguration) Marshal() (dAtA []byte, err error) {
// 	size := m.ProtoSize()
// 	dAtA = make([]byte, size)
// 	n, err := m.MarshalToSizedBuffer(dAtA[:size])
// 	if err != nil {
// 		return nil, err
// 	}
// 	return dAtA[:n], nil
// }
// 
// func (m *OptionsConfiguration) MarshalTo(dAtA []byte) (int, error) {
// 	size := m.ProtoSize()
// 	return m.MarshalToSizedBuffer(dAtA[:size])
// }
// 
// func (m *OptionsConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
// 	i := len(dAtA)
// 	_ = i
// 	var l int
// 	_ = l
// 	return len(dAtA) - i, nil
// }
// 
// func (m *ObservedDevice) Marshal() (dAtA []byte, err error) {
// 	size := m.ProtoSize()
// 	dAtA = make([]byte, size)
// 	n, err := m.MarshalToSizedBuffer(dAtA[:size])
// 	if err != nil {
// 		return nil, err
// 	}
// 	return dAtA[:n], nil
// }
// 
// func (m *ObservedDevice) MarshalTo(dAtA []byte) (int, error) {
// 	size := m.ProtoSize()
// 	return m.MarshalToSizedBuffer(dAtA[:size])
// }
// 
// func (m *ObservedDevice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
// 	i := len(dAtA)
// 	_ = i
// 	var l int
// 	_ = l
// 	return len(dAtA) - i, nil
// }
// 
// func (m *Configuration) Marshal() (dAtA []byte, err error) {
// 	size := m.ProtoSize()
// 	dAtA = make([]byte, size)
// 	n, err := m.MarshalToSizedBuffer(dAtA[:size])
// 	if err != nil {
// 		return nil, err
// 	}
// 	return dAtA[:n], nil
// }
// 
// func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
// 	size := m.ProtoSize()
// 	return m.MarshalToSizedBuffer(dAtA[:size])
// }
// 
// func (m *Configuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
// 	i := len(dAtA)
// 	_ = i
// 	var l int
// 	_ = l
// 	if len(m.PendingDevices) > 0 {
// 		for iNdEx := len(m.PendingDevices) - 1; iNdEx >= 0; iNdEx-- {
// 			{
// 				size, err := m.PendingDevices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
// 				if err != nil {
// 					return 0, err
// 				}
// 				i -= size
// 				i = encodeVarintConfig(dAtA, i, uint64(size))
// 			}
// 			i--
// 			dAtA[i] = 0x42
// 		}
// 	}
// 	if len(m.IgnoredDevices) > 0 {
// 		for iNdEx := len(m.IgnoredDevices) - 1; iNdEx >= 0; iNdEx-- {
// 			{
// 				size, err := m.IgnoredDevices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
// 				if err != nil {
// 					return 0, err
// 				}
// 				i -= size
// 				i = encodeVarintConfig(dAtA, i, uint64(size))
// 			}
// 			i--
// 			dAtA[i] = 0x3a
// 		}
// 	}
// 	{
// 		size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
// 		if err != nil {
// 			return 0, err
// 		}
// 		i -= size
// 		i = encodeVarintConfig(dAtA, i, uint64(size))
// 	}
// 	i--
// 	dAtA[i] = 0x32
// 	{
// 		size, err := m.Ldap.MarshalToSizedBuffer(dAtA[:i])
// 		if err != nil {
// 			return 0, err
// 		}
// 		i -= size
// 		i = encodeVarintConfig(dAtA, i, uint64(size))
// 	}
// 	i--
// 	dAtA[i] = 0x2a
// 	{
// 		size, err := m.Gui.MarshalToSizedBuffer(dAtA[:i])
// 		if err != nil {
// 			return 0, err
// 		}
// 		i -= size
// 		i = encodeVarintConfig(dAtA, i, uint64(size))
// 	}
// 	i--
// 	dAtA[i] = 0x22
// 	if len(m.Devices) > 0 {
// 		for iNdEx := len(m.Devices) - 1; iNdEx >= 0; iNdEx-- {
// 			{
// 				size, err := m.Devices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
// 				if err != nil {
// 					return 0, err
// 				}
// 				i -= size
// 				i = encodeVarintConfig(dAtA, i, uint64(size))
// 			}
// 			i--
// 			dAtA[i] = 0x1a
// 		}
// 	}
// 	if len(m.Folders) > 0 {
// 		for iNdEx := len(m.Folders) - 1; iNdEx >= 0; iNdEx-- {
// 			{
// 				size, err := m.Folders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
// 				if err != nil {
// 					return 0, err
// 				}
// 				i -= size
// 				i = encodeVarintConfig(dAtA, i, uint64(size))
// 			}
// 			i--
// 			dAtA[i] = 0x12
// 		}
// 	}
// 	if m.Version != 0 {
// 		i = encodeVarintConfig(dAtA, i, uint64(m.Version))
// 		i--
// 		dAtA[i] = 0x8
// 	}
// 	return len(dAtA) - i, nil
// }
// 
// func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
// 	offset -= sovConfig(v)
// 	base := offset
// 	for v >= 1<<7 {
// 		dAtA[offset] = uint8(v&0x7f | 0x80)
// 		v >>= 7
// 		offset++
// 	}
// 	dAtA[offset] = uint8(v)
// 	return base
// }
// func (m *FolderConfiguration) ProtoSize() (n int) {
// 	if m == nil {
// 		return 0
// 	}
// 	var l int
// 	_ = l
// 	l = len(m.Id)
// 	if l > 0 {
// 		n += 1 + l + sovConfig(uint64(l))
// 	}
// 	l = len(m.Label)
// 	if l > 0 {
// 		n += 1 + l + sovConfig(uint64(l))
// 	}
// 	return n
// }
// 
// func (m *DeviceConfiguration) ProtoSize() (n int) {
// 	if m == nil {
// 		return 0
// 	}
// 	var l int
// 	_ = l
// 	return n
// }
// 
// func (m *GUIConfiguration) ProtoSize() (n int) {
// 	if m == nil {
// 		return 0
// 	}
// 	var l int
// 	_ = l
// 	return n
// }
// 
// func (m *LDAPConfiguration) ProtoSize() (n int) {
// 	if m == nil {
// 		return 0
// 	}
// 	var l int
// 	_ = l
// 	return n
// }
// 
// func (m *OptionsConfiguration) ProtoSize() (n int) {
// 	if m == nil {
// 		return 0
// 	}
// 	var l int
// 	_ = l
// 	return n
// }
// 
// func (m *ObservedDevice) ProtoSize() (n int) {
// 	if m == nil {
// 		return 0
// 	}
// 	var l int
// 	_ = l
// 	return n
// }
// 
// func (m *Configuration) ProtoSize() (n int) {
// 	if m == nil {
// 		return 0
// 	}
// 	var l int
// 	_ = l
// 	if m.Version != 0 {
// 		n += 1 + sovConfig(uint64(m.Version))
// 	}
// 	if len(m.Folders) > 0 {
// 		for _, e := range m.Folders {
// 			l = e.ProtoSize()
// 			n += 1 + l + sovConfig(uint64(l))
// 		}
// 	}
// 	if len(m.Devices) > 0 {
// 		for _, e := range m.Devices {
// 			l = e.ProtoSize()
// 			n += 1 + l + sovConfig(uint64(l))
// 		}
// 	}
// 	l = m.Gui.ProtoSize()
// 	n += 1 + l + sovConfig(uint64(l))
// 	l = m.Ldap.ProtoSize()
// 	n += 1 + l + sovConfig(uint64(l))
// 	l = m.Options.ProtoSize()
// 	n += 1 + l + sovConfig(uint64(l))
// 	if len(m.IgnoredDevices) > 0 {
// 		for _, e := range m.IgnoredDevices {
// 			l = e.ProtoSize()
// 			n += 1 + l + sovConfig(uint64(l))
// 		}
// 	}
// 	if len(m.PendingDevices) > 0 {
// 		for _, e := range m.PendingDevices {
// 			l = e.ProtoSize()
// 			n += 1 + l + sovConfig(uint64(l))
// 		}
// 	}
// 	return n
// }
// 
// func sovConfig(x uint64) (n int) {
// 	return (math_bits.Len64(x|1) + 6) / 7
// }
// func sozConfig(x uint64) (n int) {
// 	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
// }
// func (m *FolderConfiguration) Unmarshal(dAtA []byte) error {
// 	l := len(dAtA)
// 	iNdEx := 0
// 	for iNdEx < l {
// 		preIndex := iNdEx
// 		var wire uint64
// 		for shift := uint(0); ; shift += 7 {
// 			if shift >= 64 {
// 				return ErrIntOverflowConfig
// 			}
// 			if iNdEx >= l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			b := dAtA[iNdEx]
// 			iNdEx++
// 			wire |= uint64(b&0x7F) << shift
// 			if b < 0x80 {
// 				break
// 			}
// 		}
// 		fieldNum := int32(wire >> 3)
// 		wireType := int(wire & 0x7)
// 		if wireType == 4 {
// 			return fmt.Errorf("proto: FolderConfiguration: wiretype end group for non-group")
// 		}
// 		if fieldNum <= 0 {
// 			return fmt.Errorf("proto: FolderConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
// 		}
// 		switch fieldNum {
// 		case 1:
// 			if wireType != 2 {
// 				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
// 			}
// 			var stringLen uint64
// 			for shift := uint(0); ; shift += 7 {
// 				if shift >= 64 {
// 					return ErrIntOverflowConfig
// 				}
// 				if iNdEx >= l {
// 					return io.ErrUnexpectedEOF
// 				}
// 				b := dAtA[iNdEx]
// 				iNdEx++
// 				stringLen |= uint64(b&0x7F) << shift
// 				if b < 0x80 {
// 					break
// 				}
// 			}
// 			intStringLen := int(stringLen)
// 			if intStringLen < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			postIndex := iNdEx + intStringLen
// 			if postIndex < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if postIndex > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			m.Id = string(dAtA[iNdEx:postIndex])
// 			iNdEx = postIndex
// 		case 2:
// 			if wireType != 2 {
// 				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
// 			}
// 			var stringLen uint64
// 			for shift := uint(0); ; shift += 7 {
// 				if shift >= 64 {
// 					return ErrIntOverflowConfig
// 				}
// 				if iNdEx >= l {
// 					return io.ErrUnexpectedEOF
// 				}
// 				b := dAtA[iNdEx]
// 				iNdEx++
// 				stringLen |= uint64(b&0x7F) << shift
// 				if b < 0x80 {
// 					break
// 				}
// 			}
// 			intStringLen := int(stringLen)
// 			if intStringLen < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			postIndex := iNdEx + intStringLen
// 			if postIndex < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if postIndex > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			m.Label = string(dAtA[iNdEx:postIndex])
// 			iNdEx = postIndex
// 		default:
// 			iNdEx = preIndex
// 			skippy, err := skipConfig(dAtA[iNdEx:])
// 			if err != nil {
// 				return err
// 			}
// 			if skippy < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			iNdEx += skippy
// 		}
// 	}
// 
// 	if iNdEx > l {
// 		return io.ErrUnexpectedEOF
// 	}
// 	return nil
// }
// func (m *DeviceConfiguration) Unmarshal(dAtA []byte) error {
// 	l := len(dAtA)
// 	iNdEx := 0
// 	for iNdEx < l {
// 		preIndex := iNdEx
// 		var wire uint64
// 		for shift := uint(0); ; shift += 7 {
// 			if shift >= 64 {
// 				return ErrIntOverflowConfig
// 			}
// 			if iNdEx >= l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			b := dAtA[iNdEx]
// 			iNdEx++
// 			wire |= uint64(b&0x7F) << shift
// 			if b < 0x80 {
// 				break
// 			}
// 		}
// 		fieldNum := int32(wire >> 3)
// 		wireType := int(wire & 0x7)
// 		if wireType == 4 {
// 			return fmt.Errorf("proto: DeviceConfiguration: wiretype end group for non-group")
// 		}
// 		if fieldNum <= 0 {
// 			return fmt.Errorf("proto: DeviceConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
// 		}
// 		switch fieldNum {
// 		default:
// 			iNdEx = preIndex
// 			skippy, err := skipConfig(dAtA[iNdEx:])
// 			if err != nil {
// 				return err
// 			}
// 			if skippy < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			iNdEx += skippy
// 		}
// 	}
// 
// 	if iNdEx > l {
// 		return io.ErrUnexpectedEOF
// 	}
// 	return nil
// }
// func (m *GUIConfiguration) Unmarshal(dAtA []byte) error {
// 	l := len(dAtA)
// 	iNdEx := 0
// 	for iNdEx < l {
// 		preIndex := iNdEx
// 		var wire uint64
// 		for shift := uint(0); ; shift += 7 {
// 			if shift >= 64 {
// 				return ErrIntOverflowConfig
// 			}
// 			if iNdEx >= l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			b := dAtA[iNdEx]
// 			iNdEx++
// 			wire |= uint64(b&0x7F) << shift
// 			if b < 0x80 {
// 				break
// 			}
// 		}
// 		fieldNum := int32(wire >> 3)
// 		wireType := int(wire & 0x7)
// 		if wireType == 4 {
// 			return fmt.Errorf("proto: GUIConfiguration: wiretype end group for non-group")
// 		}
// 		if fieldNum <= 0 {
// 			return fmt.Errorf("proto: GUIConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
// 		}
// 		switch fieldNum {
// 		default:
// 			iNdEx = preIndex
// 			skippy, err := skipConfig(dAtA[iNdEx:])
// 			if err != nil {
// 				return err
// 			}
// 			if skippy < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			iNdEx += skippy
// 		}
// 	}
// 
// 	if iNdEx > l {
// 		return io.ErrUnexpectedEOF
// 	}
// 	return nil
// }
// func (m *LDAPConfiguration) Unmarshal(dAtA []byte) error {
// 	l := len(dAtA)
// 	iNdEx := 0
// 	for iNdEx < l {
// 		preIndex := iNdEx
// 		var wire uint64
// 		for shift := uint(0); ; shift += 7 {
// 			if shift >= 64 {
// 				return ErrIntOverflowConfig
// 			}
// 			if iNdEx >= l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			b := dAtA[iNdEx]
// 			iNdEx++
// 			wire |= uint64(b&0x7F) << shift
// 			if b < 0x80 {
// 				break
// 			}
// 		}
// 		fieldNum := int32(wire >> 3)
// 		wireType := int(wire & 0x7)
// 		if wireType == 4 {
// 			return fmt.Errorf("proto: LDAPConfiguration: wiretype end group for non-group")
// 		}
// 		if fieldNum <= 0 {
// 			return fmt.Errorf("proto: LDAPConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
// 		}
// 		switch fieldNum {
// 		default:
// 			iNdEx = preIndex
// 			skippy, err := skipConfig(dAtA[iNdEx:])
// 			if err != nil {
// 				return err
// 			}
// 			if skippy < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			iNdEx += skippy
// 		}
// 	}
// 
// 	if iNdEx > l {
// 		return io.ErrUnexpectedEOF
// 	}
// 	return nil
// }
// func (m *OptionsConfiguration) Unmarshal(dAtA []byte) error {
// 	l := len(dAtA)
// 	iNdEx := 0
// 	for iNdEx < l {
// 		preIndex := iNdEx
// 		var wire uint64
// 		for shift := uint(0); ; shift += 7 {
// 			if shift >= 64 {
// 				return ErrIntOverflowConfig
// 			}
// 			if iNdEx >= l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			b := dAtA[iNdEx]
// 			iNdEx++
// 			wire |= uint64(b&0x7F) << shift
// 			if b < 0x80 {
// 				break
// 			}
// 		}
// 		fieldNum := int32(wire >> 3)
// 		wireType := int(wire & 0x7)
// 		if wireType == 4 {
// 			return fmt.Errorf("proto: OptionsConfiguration: wiretype end group for non-group")
// 		}
// 		if fieldNum <= 0 {
// 			return fmt.Errorf("proto: OptionsConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
// 		}
// 		switch fieldNum {
// 		default:
// 			iNdEx = preIndex
// 			skippy, err := skipConfig(dAtA[iNdEx:])
// 			if err != nil {
// 				return err
// 			}
// 			if skippy < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			iNdEx += skippy
// 		}
// 	}
// 
// 	if iNdEx > l {
// 		return io.ErrUnexpectedEOF
// 	}
// 	return nil
// }
// func (m *ObservedDevice) Unmarshal(dAtA []byte) error {
// 	l := len(dAtA)
// 	iNdEx := 0
// 	for iNdEx < l {
// 		preIndex := iNdEx
// 		var wire uint64
// 		for shift := uint(0); ; shift += 7 {
// 			if shift >= 64 {
// 				return ErrIntOverflowConfig
// 			}
// 			if iNdEx >= l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			b := dAtA[iNdEx]
// 			iNdEx++
// 			wire |= uint64(b&0x7F) << shift
// 			if b < 0x80 {
// 				break
// 			}
// 		}
// 		fieldNum := int32(wire >> 3)
// 		wireType := int(wire & 0x7)
// 		if wireType == 4 {
// 			return fmt.Errorf("proto: ObservedDevice: wiretype end group for non-group")
// 		}
// 		if fieldNum <= 0 {
// 			return fmt.Errorf("proto: ObservedDevice: illegal tag %d (wire type %d)", fieldNum, wire)
// 		}
// 		switch fieldNum {
// 		default:
// 			iNdEx = preIndex
// 			skippy, err := skipConfig(dAtA[iNdEx:])
// 			if err != nil {
// 				return err
// 			}
// 			if skippy < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			iNdEx += skippy
// 		}
// 	}
// 
// 	if iNdEx > l {
// 		return io.ErrUnexpectedEOF
// 	}
// 	return nil
// }
// func (m *Configuration) Unmarshal(dAtA []byte) error {
// 	l := len(dAtA)
// 	iNdEx := 0
// 	for iNdEx < l {
// 		preIndex := iNdEx
// 		var wire uint64
// 		for shift := uint(0); ; shift += 7 {
// 			if shift >= 64 {
// 				return ErrIntOverflowConfig
// 			}
// 			if iNdEx >= l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			b := dAtA[iNdEx]
// 			iNdEx++
// 			wire |= uint64(b&0x7F) << shift
// 			if b < 0x80 {
// 				break
// 			}
// 		}
// 		fieldNum := int32(wire >> 3)
// 		wireType := int(wire & 0x7)
// 		if wireType == 4 {
// 			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
// 		}
// 		if fieldNum <= 0 {
// 			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
// 		}
// 		switch fieldNum {
// 		case 1:
// 			if wireType != 0 {
// 				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
// 			}
// 			m.Version = 0
// 			for shift := uint(0); ; shift += 7 {
// 				if shift >= 64 {
// 					return ErrIntOverflowConfig
// 				}
// 				if iNdEx >= l {
// 					return io.ErrUnexpectedEOF
// 				}
// 				b := dAtA[iNdEx]
// 				iNdEx++
// 				m.Version |= int32(b&0x7F) << shift
// 				if b < 0x80 {
// 					break
// 				}
// 			}
// 		case 2:
// 			if wireType != 2 {
// 				return fmt.Errorf("proto: wrong wireType = %d for field Folders", wireType)
// 			}
// 			var msglen int
// 			for shift := uint(0); ; shift += 7 {
// 				if shift >= 64 {
// 					return ErrIntOverflowConfig
// 				}
// 				if iNdEx >= l {
// 					return io.ErrUnexpectedEOF
// 				}
// 				b := dAtA[iNdEx]
// 				iNdEx++
// 				msglen |= int(b&0x7F) << shift
// 				if b < 0x80 {
// 					break
// 				}
// 			}
// 			if msglen < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			postIndex := iNdEx + msglen
// 			if postIndex < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if postIndex > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			m.Folders = append(m.Folders, FolderConfiguration{})
// 			if err := m.Folders[len(m.Folders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
// 				return err
// 			}
// 			iNdEx = postIndex
// 		case 3:
// 			if wireType != 2 {
// 				return fmt.Errorf("proto: wrong wireType = %d for field Devices", wireType)
// 			}
// 			var msglen int
// 			for shift := uint(0); ; shift += 7 {
// 				if shift >= 64 {
// 					return ErrIntOverflowConfig
// 				}
// 				if iNdEx >= l {
// 					return io.ErrUnexpectedEOF
// 				}
// 				b := dAtA[iNdEx]
// 				iNdEx++
// 				msglen |= int(b&0x7F) << shift
// 				if b < 0x80 {
// 					break
// 				}
// 			}
// 			if msglen < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			postIndex := iNdEx + msglen
// 			if postIndex < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if postIndex > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			m.Devices = append(m.Devices, DeviceConfiguration{})
// 			if err := m.Devices[len(m.Devices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
// 				return err
// 			}
// 			iNdEx = postIndex
// 		case 4:
// 			if wireType != 2 {
// 				return fmt.Errorf("proto: wrong wireType = %d for field Gui", wireType)
// 			}
// 			var msglen int
// 			for shift := uint(0); ; shift += 7 {
// 				if shift >= 64 {
// 					return ErrIntOverflowConfig
// 				}
// 				if iNdEx >= l {
// 					return io.ErrUnexpectedEOF
// 				}
// 				b := dAtA[iNdEx]
// 				iNdEx++
// 				msglen |= int(b&0x7F) << shift
// 				if b < 0x80 {
// 					break
// 				}
// 			}
// 			if msglen < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			postIndex := iNdEx + msglen
// 			if postIndex < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if postIndex > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			if err := m.Gui.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
// 				return err
// 			}
// 			iNdEx = postIndex
// 		case 5:
// 			if wireType != 2 {
// 				return fmt.Errorf("proto: wrong wireType = %d for field Ldap", wireType)
// 			}
// 			var msglen int
// 			for shift := uint(0); ; shift += 7 {
// 				if shift >= 64 {
// 					return ErrIntOverflowConfig
// 				}
// 				if iNdEx >= l {
// 					return io.ErrUnexpectedEOF
// 				}
// 				b := dAtA[iNdEx]
// 				iNdEx++
// 				msglen |= int(b&0x7F) << shift
// 				if b < 0x80 {
// 					break
// 				}
// 			}
// 			if msglen < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			postIndex := iNdEx + msglen
// 			if postIndex < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if postIndex > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			if err := m.Ldap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
// 				return err
// 			}
// 			iNdEx = postIndex
// 		case 6:
// 			if wireType != 2 {
// 				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
// 			}
// 			var msglen int
// 			for shift := uint(0); ; shift += 7 {
// 				if shift >= 64 {
// 					return ErrIntOverflowConfig
// 				}
// 				if iNdEx >= l {
// 					return io.ErrUnexpectedEOF
// 				}
// 				b := dAtA[iNdEx]
// 				iNdEx++
// 				msglen |= int(b&0x7F) << shift
// 				if b < 0x80 {
// 					break
// 				}
// 			}
// 			if msglen < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			postIndex := iNdEx + msglen
// 			if postIndex < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if postIndex > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
// 				return err
// 			}
// 			iNdEx = postIndex
// 		case 7:
// 			if wireType != 2 {
// 				return fmt.Errorf("proto: wrong wireType = %d for field IgnoredDevices", wireType)
// 			}
// 			var msglen int
// 			for shift := uint(0); ; shift += 7 {
// 				if shift >= 64 {
// 					return ErrIntOverflowConfig
// 				}
// 				if iNdEx >= l {
// 					return io.ErrUnexpectedEOF
// 				}
// 				b := dAtA[iNdEx]
// 				iNdEx++
// 				msglen |= int(b&0x7F) << shift
// 				if b < 0x80 {
// 					break
// 				}
// 			}
// 			if msglen < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			postIndex := iNdEx + msglen
// 			if postIndex < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if postIndex > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			m.IgnoredDevices = append(m.IgnoredDevices, ObservedDevice{})
// 			if err := m.IgnoredDevices[len(m.IgnoredDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
// 				return err
// 			}
// 			iNdEx = postIndex
// 		case 8:
// 			if wireType != 2 {
// 				return fmt.Errorf("proto: wrong wireType = %d for field PendingDevices", wireType)
// 			}
// 			var msglen int
// 			for shift := uint(0); ; shift += 7 {
// 				if shift >= 64 {
// 					return ErrIntOverflowConfig
// 				}
// 				if iNdEx >= l {
// 					return io.ErrUnexpectedEOF
// 				}
// 				b := dAtA[iNdEx]
// 				iNdEx++
// 				msglen |= int(b&0x7F) << shift
// 				if b < 0x80 {
// 					break
// 				}
// 			}
// 			if msglen < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			postIndex := iNdEx + msglen
// 			if postIndex < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if postIndex > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			m.PendingDevices = append(m.PendingDevices, ObservedDevice{})
// 			if err := m.PendingDevices[len(m.PendingDevices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
// 				return err
// 			}
// 			iNdEx = postIndex
// 		default:
// 			iNdEx = preIndex
// 			skippy, err := skipConfig(dAtA[iNdEx:])
// 			if err != nil {
// 				return err
// 			}
// 			if skippy < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) < 0 {
// 				return ErrInvalidLengthConfig
// 			}
// 			if (iNdEx + skippy) > l {
// 				return io.ErrUnexpectedEOF
// 			}
// 			iNdEx += skippy
// 		}
// 	}
// 
// 	if iNdEx > l {
// 		return io.ErrUnexpectedEOF
// 	}
// 	return nil
// }
// func skipConfig(dAtA []byte) (n int, err error) {
// 	l := len(dAtA)
// 	iNdEx := 0
// 	depth := 0
// 	for iNdEx < l {
// 		var wire uint64
// 		for shift := uint(0); ; shift += 7 {
// 			if shift >= 64 {
// 				return 0, ErrIntOverflowConfig
// 			}
// 			if iNdEx >= l {
// 				return 0, io.ErrUnexpectedEOF
// 			}
// 			b := dAtA[iNdEx]
// 			iNdEx++
// 			wire |= (uint64(b) & 0x7F) << shift
// 			if b < 0x80 {
// 				break
// 			}
// 		}
// 		wireType := int(wire & 0x7)
// 		switch wireType {
// 		case 0:
// 			for shift := uint(0); ; shift += 7 {
// 				if shift >= 64 {
// 					return 0, ErrIntOverflowConfig
// 				}
// 				if iNdEx >= l {
// 					return 0, io.ErrUnexpectedEOF
// 				}
// 				iNdEx++
// 				if dAtA[iNdEx-1] < 0x80 {
// 					break
// 				}
// 			}
// 		case 1:
// 			iNdEx += 8
// 		case 2:
// 			var length int
// 			for shift := uint(0); ; shift += 7 {
// 				if shift >= 64 {
// 					return 0, ErrIntOverflowConfig
// 				}
// 				if iNdEx >= l {
// 					return 0, io.ErrUnexpectedEOF
// 				}
// 				b := dAtA[iNdEx]
// 				iNdEx++
// 				length |= (int(b) & 0x7F) << shift
// 				if b < 0x80 {
// 					break
// 				}
// 			}
// 			if length < 0 {
// 				return 0, ErrInvalidLengthConfig
// 			}
// 			iNdEx += length
// 		case 3:
// 			depth++
// 		case 4:
// 			if depth == 0 {
// 				return 0, ErrUnexpectedEndOfGroupConfig
// 			}
// 			depth--
// 		case 5:
// 			iNdEx += 4
// 		default:
// 			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
// 		}
// 		if iNdEx < 0 {
// 			return 0, ErrInvalidLengthConfig
// 		}
// 		if depth == 0 {
// 			return iNdEx, nil
// 		}
// 	}
// 	return 0, io.ErrUnexpectedEOF
// }
// 
// var (
// 	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
// 	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
// 	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
// )
