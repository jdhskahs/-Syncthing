// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lib/config/optionsconfiguration.proto

package config

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/syncthing/syncthing/proto/ext"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OptionsConfiguration struct {
	RawListenAddresses      []string `protobuf:"bytes,1,rep,name=listen_addresses,json=listenAddresses,proto3" json:"listenAddresses" xml:"listenAddress" default:"default"`
	RawGlobalAnnServers     []string `protobuf:"bytes,2,rep,name=global_discovery_servers,json=globalDiscoveryServers,proto3" json:"globalAnnounceServers" xml:"globalAnnounceServer" default:"default"`
	GlobalAnnEnabled        bool     `protobuf:"varint,3,opt,name=global_discovery_enabled,json=globalDiscoveryEnabled,proto3" json:"globalAnnounceEnabled" xml:"globalAnnounceEnabled" default:"true"`
	LocalAnnEnabled         bool     `protobuf:"varint,4,opt,name=local_discovery_enabled,json=localDiscoveryEnabled,proto3" json:"localAnnounceEnabled" xml:"localAnnounceEnabled" default:"true"`
	LocalAnnPort            int      `protobuf:"varint,5,opt,name=local_announce_port,json=localAnnouncePort,proto3,casttype=int" json:"localAnnouncePort" xml:"localAnnouncePort" default:"21027"`
	LocalAnnMCAddr          string   `protobuf:"bytes,6,opt,name=local_announce_multicast_address,json=localAnnounceMulticastAddress,proto3" json:"localAnnounceMCAddr" xml:"localAnnounceMCAddr" default:"[ff12::8384]:21027"`
	MaxSendKbps             int      `protobuf:"varint,7,opt,name=max_send_kbps,json=maxSendKbps,proto3,casttype=int" json:"maxSendKbps" xml:"maxSendKbps"`
	MaxRecvKbps             int      `protobuf:"varint,8,opt,name=max_recv_kbps,json=maxRecvKbps,proto3,casttype=int" json:"maxRecvKbps" xml:"maxRecvKbps"`
	ReconnectIntervalS      int      `protobuf:"varint,9,opt,name=reconnection_interval_s,json=reconnectionIntervalS,proto3,casttype=int" json:"reconnectionIntervalS" xml:"reconnectionIntervalS" default:"60"`
	RelaysEnabled           bool     `protobuf:"varint,10,opt,name=relays_enabled,json=relaysEnabled,proto3" json:"relaysEnabled" xml:"relaysEnabled" default:"true"`
	RelayReconnectIntervalM int      `protobuf:"varint,11,opt,name=relays_reconnect_interval_m,json=relaysReconnectIntervalM,proto3,casttype=int" json:"relayReconnectIntervalM" xml:"relayReconnectIntervalM" default:"10"`
	StartBrowser            bool     `protobuf:"varint,12,opt,name=start_browser,json=startBrowser,proto3" json:"startBrowser" xml:"startBrowser" default:"true"`
	NATEnabled              bool     `protobuf:"varint,14,opt,name=nat_traversal_enabled,json=natTraversalEnabled,proto3" json:"natEnabled" xml:"natEnabled" default:"true"`
	NATLeaseM               int      `protobuf:"varint,15,opt,name=nat_traversal_lease_m,json=natTraversalLeaseM,proto3,casttype=int" json:"natLeaseMinutes" xml:"natLeaseMinutes" default:"60"`
	NATRenewalM             int      `protobuf:"varint,16,opt,name=nat_traversal_renewal_m,json=natTraversalRenewalM,proto3,casttype=int" json:"natRenewalMinutes" xml:"natRenewalMinutes" default:"30"`
	NATTimeoutS             int      `protobuf:"varint,17,opt,name=nat_traversal_timeout_s,json=natTraversalTimeoutS,proto3,casttype=int" json:"natTimeoutSeconds" xml:"natTimeoutSeconds" default:"10"`
	URAccepted              int      `protobuf:"varint,18,opt,name=usage_reporting_accepted,json=usageReportingAccepted,proto3,casttype=int" json:"urAccepted" xml:"urAccepted"`
	URSeen                  int      `protobuf:"varint,19,opt,name=usage_reporting_seen,json=usageReportingSeen,proto3,casttype=int" json:"urSeen" xml:"urSeen"`
	URUniqueID              string   `protobuf:"bytes,20,opt,name=usage_reporting_unique_id,json=usageReportingUniqueId,proto3" json:"urUniqueId" xml:"urUniqueID"`
	URURL                   string   `protobuf:"bytes,21,opt,name=usage_reporting_url,json=usageReportingUrl,proto3" json:"urURL" xml:"urURL" default:"https://data.syncthing.net/newdata"`
	URPostInsecurely        bool     `protobuf:"varint,22,opt,name=usage_reporting_unique_post_insecurely,json=usageReportingUniquePostInsecurely,proto3" json:"urPostInsecurely" xml:"urPostInsecurely" default:"false"`
	URInitialDelayS         int      `protobuf:"varint,23,opt,name=usage_reporting_initial_delay_s,json=usageReportingInitialDelayS,proto3,casttype=int" json:"urInitialDelayS" xml:"urInitialDelayS" default:"1800"`
	RestartOnWakeup         bool     `protobuf:"varint,24,opt,name=restart_on_wakeup,json=restartOnWakeup,proto3" json:"restartOnWakeup" xml:"restartOnWakeup" default:"true"`
	AutoUpgradeIntervalH    int      `protobuf:"varint,25,opt,name=auto_upgrade_interval_h,json=autoUpgradeIntervalH,proto3,casttype=int" json:"autoUpgradeIntervalH" xml:"autoUpgradeIntervalH" default:"12"`
	UpgradeToPreReleases    bool     `protobuf:"varint,26,opt,name=upgrade_to_pre_releases,json=upgradeToPreReleases,proto3" json:"upgradeToPreReleases" xml:"upgradeToPreReleases"`
	KeepTemporariesH        int      `protobuf:"varint,27,opt,name=keep_temporaries_h,json=keepTemporariesH,proto3,casttype=int" json:"keepTemporariesH" xml:"keepTemporariesH" default:"24"`
	CacheIgnoredFiles       bool     `protobuf:"varint,28,opt,name=cache_ignored_files,json=cacheIgnoredFiles,proto3" json:"cacheIgnoredFiles" xml:"cacheIgnoredFiles" default:"false"`
	ProgressUpdateIntervalS int      `protobuf:"varint,29,opt,name=progress_update_interval_s,json=progressUpdateIntervalS,proto3,casttype=int" json:"progressUpdateIntervalS" xml:"progressUpdateIntervalS" default:"5"`
	LimitBandwidthInLan     bool     `protobuf:"varint,30,opt,name=limit_bandwidth_in_lan,json=limitBandwidthInLan,proto3" json:"limitBandwidthInLan" xml:"limitBandwidthInLan" default:"false"`
	MinHomeDiskFree         Size     `protobuf:"bytes,31,opt,name=min_home_disk_free,json=minHomeDiskFree,proto3" json:"minHomeDiskFree" xml:"minHomeDiskFree" default:"1 %"`
	ReleasesURL             string   `protobuf:"bytes,32,opt,name=releases_url,json=releasesUrl,proto3" json:"releasesURL" xml:"releasesURL" default:"https://upgrades.syncthing.net/meta.json"`
	AlwaysLocalNets         []string `protobuf:"bytes,33,rep,name=always_local_nets,json=alwaysLocalNets,proto3" json:"alwaysLocalNets" xml:"alwaysLocalNet"`
	OverwriteRemoteDevNames bool     `protobuf:"varint,34,opt,name=overwrite_remote_device_names_on_connect,json=overwriteRemoteDeviceNamesOnConnect,proto3" json:"overwriteRemoteDeviceNamesOnConnect" xml:"overwriteRemoteDeviceNamesOnConnect" default:"false"`
	TempIndexMinBlocks      int      `protobuf:"varint,35,opt,name=temp_index_min_blocks,json=tempIndexMinBlocks,proto3,casttype=int" json:"tempIndexMinBlocks" xml:"tempIndexMinBlocks" default:"10"`
	UnackedNotificationIDs  []string `protobuf:"bytes,36,rep,name=unacked_notification_ids,json=unackedNotificationIds,proto3" json:"unackedNotificationIDs" xml:"unackedNotificationID"`
	TrafficClass            int      `protobuf:"varint,37,opt,name=traffic_class,json=trafficClass,proto3,casttype=int" json:"trafficClass" xml:"trafficClass"`
	DefaultFolderPath       string   `protobuf:"bytes,38,opt,name=default_folder_path,json=defaultFolderPath,proto3" json:"defaultFolderPath" xml:"defaultFolderPath" default:"~"`
	SetLowPriority          bool     `protobuf:"varint,39,opt,name=set_low_priority,json=setLowPriority,proto3" json:"setLowPriority" xml:"setLowPriority" default:"true"`
	RawMaxFolderConcurrency int      `protobuf:"varint,40,opt,name=max_folder_concurrency,json=maxFolderConcurrency,proto3,casttype=int" json:"maxFolderConcurrency" xml:"maxFolderConcurrency"`
	CRURL                   string   `protobuf:"bytes,41,opt,name=crash_reporting_url,json=crashReportingUrl,proto3" json:"crURL" xml:"crashReportingURL" default:"https://crash.syncthing.net/newcrash"`
	CREnabled               bool     `protobuf:"varint,42,opt,name=crash_reporting_enabled,json=crashReportingEnabled,proto3" json:"crashReportingEnabled" xml:"crashReportingEnabled" default:"true"`
	StunKeepaliveStartS     int      `protobuf:"varint,43,opt,name=stun_keepalive_start_s,json=stunKeepaliveStartS,proto3,casttype=int" json:"stunKeepaliveStartS" xml:"stunKeepaliveStartS" default:"180"`
	StunKeepaliveMinS       int      `protobuf:"varint,44,opt,name=stun_keepalive_min_s,json=stunKeepaliveMinS,proto3,casttype=int" json:"stunKeepaliveMinS" xml:"stunKeepaliveMinS" default:"20"`
	RawStunServers          []string `protobuf:"bytes,45,rep,name=stun_servers,json=stunServers,proto3" json:"stunServers" xml:"stunServer" default:"default"`
	DatabaseTuning          Tuning   `protobuf:"varint,46,opt,name=database_tuning,json=databaseTuning,proto3,enum=config.Tuning" json:"databaseTuning" xml:"databaseTuning" restart:"true"`
	RawMaxCIRequestKiB      int      `protobuf:"varint,47,opt,name=max_concurrent_incoming_request_kib,json=maxConcurrentIncomingRequestKib,proto3,casttype=int" json:"maxConcurrentIncomingRequestKiB" xml:"maxConcurrentIncomingRequestKiB"`
	// Legacy deprecated
	DeprecatedUPnPEnabled        bool     `protobuf:"varint,9000,opt,name=upnp_enabled,json=upnpEnabled,proto3" json:"-" xml:"upnpEnabled,omitempty"`                                    // Deprecated: Do not use.
	DeprecatedUPnPLeaseM         int      `protobuf:"varint,9001,opt,name=upnp_lease_m,json=upnpLeaseM,proto3,casttype=int" json:"-" xml:"upnpLeaseMinutes,omitempty"`                   // Deprecated: Do not use.
	DeprecatedUPnPRenewalM       int      `protobuf:"varint,9002,opt,name=upnp_renewal_m,json=upnpRenewalM,proto3,casttype=int" json:"-" xml:"upnpRenewalMinutes,omitempty"`             // Deprecated: Do not use.
	DeprecatedUPnPTimeoutS       int      `protobuf:"varint,9003,opt,name=upnp_timeout_s,json=upnpTimeoutS,proto3,casttype=int" json:"-" xml:"upnpTimeoutSeconds,omitempty"`             // Deprecated: Do not use.
	DeprecatedRelayServers       []string `protobuf:"bytes,9004,rep,name=relay_servers,json=relayServers,proto3" json:"-" xml:"relayServer,omitempty"`                                   // Deprecated: Do not use.
	DeprecatedMinHomeDiskFreePct float64  `protobuf:"fixed64,9005,opt,name=min_home_disk_free_pct,json=minHomeDiskFreePct,proto3" json:"-" xml:"minHomeDiskFreePct,omitempty"`           // Deprecated: Do not use.
	DeprecatedMaxConcurrentScans int      `protobuf:"varint,9006,opt,name=max_concurrent_scans,json=maxConcurrentScans,proto3,casttype=int" json:"-" xml:"maxConcurrentScans,omitempty"` // Deprecated: Do not use.
}

func (m *OptionsConfiguration) Reset()         { *m = OptionsConfiguration{} }
func (m *OptionsConfiguration) String() string { return proto.CompactTextString(m) }
func (*OptionsConfiguration) ProtoMessage()    {}
func (*OptionsConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d09882599506ca03, []int{0}
}
func (m *OptionsConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OptionsConfiguration.Unmarshal(m, b)
}
func (m *OptionsConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OptionsConfiguration.Marshal(b, m, deterministic)
}
func (m *OptionsConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OptionsConfiguration.Merge(m, src)
}
func (m *OptionsConfiguration) XXX_Size() int {
	return xxx_messageInfo_OptionsConfiguration.Size(m)
}
func (m *OptionsConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_OptionsConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_OptionsConfiguration proto.InternalMessageInfo

func init() {
	proto.RegisterType((*OptionsConfiguration)(nil), "config.OptionsConfiguration")
}

func init() {
	proto.RegisterFile("lib/config/optionsconfiguration.proto", fileDescriptor_d09882599506ca03)
}

var fileDescriptor_d09882599506ca03 = []byte{
	// 3006 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x5a, 0x5b, 0x6c, 0x1d, 0x47,
	0x19, 0xf6, 0x26, 0x4d, 0xda, 0xac, 0x1d, 0x3b, 0x5e, 0xdf, 0xb6, 0x49, 0xeb, 0x75, 0x4f, 0x4e,
	0x5a, 0xf7, 0xe6, 0x5b, 0xda, 0x10, 0x22, 0x21, 0xf0, 0xa5, 0x6e, 0x4d, 0xed, 0xc4, 0x1a, 0xdb,
	0x2a, 0x2a, 0x42, 0xab, 0x39, 0x7b, 0xc6, 0xf6, 0xe2, 0x3d, 0xb3, 0x27, 0x3b, 0xb3, 0xbe, 0x14,
	0x54, 0xaa, 0x22, 0x2e, 0x6f, 0x80, 0xc5, 0x45, 0x02, 0x09, 0x15, 0x01, 0x12, 0xa5, 0x80, 0x90,
	0x90, 0x90, 0xe0, 0x05, 0x84, 0x84, 0x54, 0x95, 0x07, 0xfb, 0x11, 0x89, 0xb2, 0x52, 0x1d, 0x1e,
	0xd0, 0x11, 0xe2, 0xe1, 0x3c, 0x9a, 0x17, 0xf4, 0xcf, 0xde, 0x66, 0x2f, 0xa7, 0xc9, 0xdb, 0x99,
	0xff, 0xfb, 0xe7, 0x9f, 0xef, 0xff, 0x67, 0xe6, 0x9f, 0xf9, 0x67, 0x8f, 0x7a, 0xcd, 0xb1, 0x6b,
	0x93, 0x96, 0x4b, 0x37, 0xed, 0xad, 0x49, 0xb7, 0xc9, 0x6d, 0x97, 0xb2, 0xb0, 0xe5, 0x7b, 0x18,
	0x5a, 0x13, 0x4d, 0xcf, 0xe5, 0xae, 0x76, 0x3e, 0x14, 0x5e, 0x1e, 0x91, 0xd4, 0xb9, 0x4f, 0x6d,
	0xba, 0x15, 0x2a, 0x5c, 0x1e, 0x92, 0x00, 0x66, 0xbf, 0x41, 0x22, 0xf1, 0x05, 0xb2, 0xcf, 0xc3,
	0x9f, 0x95, 0x0f, 0xe6, 0xd5, 0xc1, 0x3b, 0xe1, 0x08, 0xf3, 0xf2, 0x08, 0xda, 0x8f, 0x15, 0xf5,
	0x92, 0x63, 0x33, 0x4e, 0xa8, 0x89, 0xeb, 0x75, 0x8f, 0x30, 0x46, 0x98, 0xae, 0x8c, 0x9d, 0x1d,
	0xbf, 0x30, 0xc7, 0x4e, 0x02, 0x43, 0x43, 0x78, 0x6f, 0x59, 0xc0, 0xb3, 0x31, 0xda, 0x0a, 0x8c,
	0x3e, 0x27, 0x2b, 0x6a, 0x07, 0xc6, 0xb5, 0xfd, 0x86, 0x73, 0xab, 0x92, 0x91, 0x57, 0xc6, 0xea,
	0x64, 0x13, 0xfb, 0x0e, 0xbf, 0x55, 0x89, 0x7e, 0x54, 0x4e, 0x8f, 0xaa, 0x0f, 0x47, 0xbf, 0x0f,
	0x8f, 0xab, 0x25, 0xc6, 0x51, 0xde, 0xb4, 0xf6, 0x5f, 0x45, 0xd5, 0xb7, 0x1c, 0xb7, 0x86, 0x1d,
	0xb3, 0x6e, 0x33, 0xcb, 0xdd, 0x25, 0xde, 0x81, 0xc9, 0x88, 0xb7, 0x4b, 0x3c, 0xa6, 0x9f, 0x11,
	0x44, 0x7f, 0xa7, 0x9c, 0x04, 0xc6, 0x00, 0xc2, 0x7b, 0x2f, 0x0b, 0xbd, 0x59, 0x4a, 0xd7, 0x42,
	0xbc, 0x15, 0x18, 0x43, 0x5b, 0xb1, 0xcc, 0xf5, 0xa9, 0x45, 0x22, 0xa0, 0x1d, 0x18, 0xcf, 0x09,
	0xc2, 0x65, 0x68, 0x09, 0xef, 0xd6, 0x51, 0x75, 0xb0, 0x4c, 0xb5, 0x7d, 0x54, 0x2d, 0x1f, 0x20,
	0xeb, 0x68, 0x19, 0x37, 0x34, 0x1c, 0x76, 0x5c, 0x88, 0x9d, 0x8a, 0xe4, 0xda, 0xbf, 0xca, 0x1c,
	0x26, 0x14, 0xd7, 0x1c, 0x52, 0xd7, 0xcf, 0x8e, 0x29, 0xe3, 0x8f, 0xcc, 0xbd, 0x0b, 0x0e, 0x5f,
	0x4a, 0x2c, 0xbe, 0x14, 0x82, 0x45, 0x6f, 0x23, 0xa0, 0x1d, 0x18, 0xcf, 0x94, 0x78, 0x1b, 0xa1,
	0x92, 0xbb, 0xdc, 0xf3, 0x09, 0xf8, 0xda, 0xc1, 0x4c, 0x27, 0xe0, 0xf4, 0xa8, 0xfa, 0x10, 0x74,
	0x3d, 0x3c, 0xae, 0x16, 0x48, 0x15, 0xdc, 0x8c, 0xe4, 0xda, 0x87, 0x8a, 0x3a, 0xe2, 0xb8, 0x56,
	0xa9, 0x97, 0x0f, 0x09, 0x2f, 0x7f, 0x0a, 0x5e, 0xf6, 0x2d, 0x83, 0x4e, 0xc6, 0xc9, 0x41, 0x27,
	0x12, 0xe5, 0x7c, 0x7c, 0x3a, 0x5c, 0x82, 0x25, 0x60, 0x89, 0x8b, 0xe5, 0x46, 0x3a, 0xc8, 0x25,
	0x07, 0xf3, 0x7c, 0xd0, 0x90, 0xe8, 0x50, 0x70, 0xef, 0x6f, 0x8a, 0x3a, 0x10, 0xba, 0x87, 0x23,
	0x5b, 0x66, 0xd3, 0xf5, 0xb8, 0x7e, 0x6e, 0x4c, 0x19, 0x3f, 0x37, 0xf7, 0x43, 0x70, 0xad, 0x27,
	0x36, 0xb5, 0xea, 0x7a, 0xbc, 0x15, 0x18, 0xfd, 0x99, 0xa1, 0x41, 0xd8, 0x0e, 0x8c, 0xa7, 0x8a,
	0x4e, 0x01, 0x22, 0x79, 0x34, 0x33, 0x3d, 0x35, 0xf3, 0x89, 0xca, 0x69, 0x60, 0x9c, 0xb5, 0x29,
	0x6f, 0x1d, 0x55, 0x4b, 0xcc, 0x94, 0x09, 0x4f, 0x8f, 0xaa, 0xe7, 0x44, 0xd7, 0xc3, 0xe3, 0x6a,
	0x86, 0x09, 0x2a, 0xea, 0x6a, 0x5f, 0x3d, 0xa3, 0x8e, 0xe5, 0xbc, 0x69, 0xf8, 0x0e, 0xb7, 0x2d,
	0xcc, 0x78, 0x9c, 0x37, 0xf4, 0xf3, 0x63, 0xca, 0xf8, 0x85, 0xb9, 0x3f, 0x80, 0x6b, 0xbd, 0xb1,
	0xc1, 0x95, 0x79, 0xd8, 0xc9, 0xad, 0xc0, 0x18, 0xc8, 0x18, 0x0d, 0xc5, 0xed, 0xc0, 0xb8, 0x51,
	0x74, 0x2f, 0xc4, 0x24, 0x07, 0x3f, 0xbf, 0xb9, 0x39, 0x3d, 0x73, 0xeb, 0xd6, 0xcd, 0xeb, 0x37,
	0x5f, 0xf8, 0xc2, 0xad, 0xd0, 0xdb, 0xd6, 0x51, 0xb5, 0xd4, 0x60, 0xb9, 0xf8, 0xf4, 0xa8, 0xaa,
	0x15, 0x8d, 0x1c, 0x1e, 0x57, 0x73, 0x34, 0xd1, 0xe3, 0xd9, 0xce, 0xb1, 0x87, 0x51, 0x32, 0xd2,
	0xee, 0xa8, 0x17, 0x1b, 0x78, 0xdf, 0x64, 0x84, 0xd6, 0xcd, 0x9d, 0x5a, 0x93, 0xe9, 0x0f, 0x8b,
	0xc9, 0x7c, 0xb6, 0x15, 0x18, 0xdd, 0x0d, 0xbc, 0xbf, 0x46, 0x68, 0xfd, 0xd5, 0x5a, 0x13, 0x92,
	0x4b, 0xbf, 0x70, 0x4b, 0x92, 0xc5, 0xf3, 0x83, 0x64, 0xc5, 0xd8, 0xa0, 0x47, 0xac, 0xdd, 0xd0,
	0xe0, 0x23, 0x19, 0x83, 0x88, 0x58, 0xbb, 0x79, 0x83, 0xb1, 0x2c, 0x63, 0x30, 0x16, 0x6a, 0xbf,
	0x57, 0xd4, 0x11, 0x8f, 0x58, 0x2e, 0xa5, 0xc4, 0x82, 0xf4, 0x6e, 0xda, 0x94, 0x13, 0x6f, 0x17,
	0x3b, 0x26, 0xd3, 0x2f, 0x08, 0xdb, 0x6f, 0x8a, 0xa4, 0x1e, 0xab, 0x2c, 0x45, 0xf0, 0x1a, 0xe4,
	0x0e, 0xb9, 0x63, 0x02, 0xb4, 0x03, 0x63, 0x5c, 0x8c, 0x5d, 0x8a, 0x4a, 0xb3, 0x74, 0x63, 0x2a,
	0xa6, 0x74, 0x7a, 0x54, 0x3d, 0x73, 0x63, 0x4a, 0xe4, 0xf7, 0xc2, 0x38, 0xa8, 0x7c, 0x14, 0x6d,
	0x53, 0xed, 0xf5, 0x88, 0x83, 0x0f, 0x58, 0x92, 0x03, 0x54, 0x91, 0x03, 0x3e, 0xdd, 0x0a, 0x8c,
	0x8b, 0x21, 0x92, 0x6e, 0xf4, 0x4a, 0x44, 0x48, 0x92, 0xe6, 0x77, 0x78, 0xbc, 0x63, 0x51, 0xb6,
	0xb3, 0xf6, 0xf6, 0x19, 0xf5, 0x4a, 0x34, 0x50, 0x42, 0x24, 0x0d, 0x52, 0x43, 0xef, 0x16, 0x41,
	0xfa, 0x0b, 0xac, 0xe1, 0x11, 0x04, 0x7a, 0x05, 0x17, 0x56, 0x5a, 0x81, 0x31, 0xe2, 0x95, 0x43,
	0x49, 0xa2, 0xed, 0x80, 0x4b, 0x2c, 0xa7, 0xa7, 0xa4, 0x2d, 0xdb, 0xd1, 0x5e, 0x67, 0x08, 0x82,
	0x3c, 0x0d, 0x41, 0xee, 0x44, 0x13, 0xe9, 0xa1, 0x9f, 0x45, 0x44, 0xab, 0xa9, 0x17, 0x19, 0xc7,
	0x1e, 0x37, 0x6b, 0x9e, 0xbb, 0xc7, 0x88, 0xa7, 0xf7, 0x88, 0x58, 0x7f, 0xaa, 0x15, 0x18, 0x3d,
	0x02, 0x98, 0x0b, 0xe5, 0xed, 0xc0, 0x78, 0x42, 0xb8, 0x23, 0x0b, 0x3b, 0x46, 0x3a, 0xd3, 0x55,
	0xfb, 0xb9, 0xa2, 0x0e, 0x51, 0xcc, 0x4d, 0xee, 0x61, 0x38, 0xd5, 0xb0, 0x93, 0x4c, 0x6c, 0xaf,
	0x18, 0xec, 0xee, 0x49, 0x60, 0xa8, 0xb7, 0x67, 0xd7, 0xd3, 0xb4, 0xae, 0x52, 0xcc, 0xd3, 0x39,
	0x36, 0xc4, 0xc0, 0xa9, 0xa8, 0x24, 0x85, 0xcb, 0x1d, 0x32, 0x2d, 0x29, 0x5d, 0x4b, 0x43, 0xa0,
	0x01, 0x8a, 0xf9, 0x7a, 0x4c, 0x27, 0x5e, 0x10, 0x7f, 0x2c, 0xf0, 0x74, 0x08, 0x66, 0xc4, 0x6c,
	0xe8, 0x7d, 0x62, 0x29, 0x7c, 0x1d, 0x96, 0xc2, 0x85, 0xdb, 0xb3, 0xeb, 0xcb, 0x20, 0x86, 0xc9,
	0xef, 0xa3, 0x98, 0x87, 0x0d, 0x9b, 0xfa, 0x5c, 0x5c, 0x7e, 0x2a, 0x31, 0x59, 0x59, 0x5e, 0xba,
	0x37, 0x5a, 0x47, 0xd5, 0x42, 0xff, 0xa2, 0x28, 0xd9, 0x41, 0xe9, 0xc0, 0x48, 0x93, 0xd9, 0x87,
	0x32, 0xed, 0x03, 0x45, 0x1d, 0xc9, 0x92, 0xf7, 0x08, 0x25, 0x7b, 0x62, 0x25, 0x5f, 0x12, 0xf4,
	0x0f, 0x81, 0x7e, 0xf7, 0xed, 0xd9, 0x75, 0x14, 0x02, 0xe0, 0x40, 0x3f, 0xc5, 0x3c, 0x6e, 0x26,
	0x2e, 0x54, 0x63, 0x17, 0xb2, 0x88, 0xe4, 0xc4, 0x75, 0xd9, 0x89, 0x12, 0x1b, 0x65, 0x42, 0x70,
	0xe4, 0x3a, 0x38, 0x22, 0x53, 0x40, 0x83, 0xb2, 0x2b, 0xb1, 0xb4, 0xc4, 0x19, 0x6e, 0x37, 0x88,
	0xeb, 0x73, 0x93, 0xe9, 0xfd, 0x59, 0x67, 0xd6, 0x43, 0x60, 0x2d, 0x72, 0x26, 0x6e, 0xc2, 0x4a,
	0xaf, 0x67, 0x9c, 0xc9, 0x22, 0x9d, 0xb6, 0x5f, 0x89, 0x8d, 0x32, 0x61, 0xb2, 0xe5, 0x64, 0x0a,
	0x59, 0x67, 0x62, 0xa9, 0xf6, 0x23, 0x45, 0xd5, 0x7d, 0x86, 0xb7, 0x88, 0xe9, 0x11, 0x38, 0xf7,
	0x6d, 0xba, 0x65, 0x62, 0xcb, 0x22, 0x4d, 0x4e, 0xea, 0xba, 0x26, 0xbc, 0xc1, 0xb0, 0x03, 0x36,
	0xd0, 0x6c, 0x24, 0x85, 0x1d, 0xe0, 0x7b, 0x71, 0xab, 0x1d, 0x18, 0x97, 0x84, 0x13, 0xa9, 0x48,
	0x22, 0x2c, 0x2b, 0x66, 0x5a, 0xb0, 0xe2, 0x53, 0x93, 0x68, 0x58, 0x50, 0x40, 0x31, 0x83, 0x58,
	0xae, 0x7d, 0x49, 0x1d, 0xcc, 0x93, 0x63, 0x84, 0x50, 0x7d, 0x40, 0x10, 0x5b, 0x3a, 0x09, 0x8c,
	0xf3, 0x1b, 0x68, 0x8d, 0x10, 0xda, 0x0a, 0x8c, 0xf3, 0xbe, 0x07, 0xbf, 0xda, 0x81, 0xd1, 0x13,
	0x11, 0x82, 0xa6, 0x44, 0x26, 0x56, 0x48, 0x7e, 0x1d, 0x1e, 0x57, 0xa3, 0xee, 0x48, 0xcb, 0x12,
	0x00, 0x99, 0xf6, 0x3d, 0x45, 0x7d, 0x34, 0x3f, 0xba, 0x4f, 0xed, 0xbb, 0x3e, 0x31, 0xed, 0xba,
	0x3e, 0x28, 0x2e, 0x11, 0xaf, 0x87, 0xb1, 0xd9, 0x10, 0xe2, 0xa5, 0x85, 0x30, 0x36, 0x51, 0x4b,
	0x8e, 0x4d, 0xac, 0x50, 0x09, 0x83, 0x12, 0x37, 0xdb, 0x72, 0x2b, 0x0a, 0x4a, 0x8c, 0xe5, 0x83,
	0x12, 0x6b, 0x69, 0x7f, 0x56, 0xd4, 0x81, 0x02, 0x2f, 0xcf, 0xd1, 0x87, 0x04, 0xa3, 0x6f, 0xc1,
	0xda, 0x3b, 0xb7, 0x81, 0x36, 0xd0, 0x72, 0x2b, 0x30, 0xce, 0xf9, 0xde, 0x06, 0x5a, 0x6e, 0x07,
	0xc6, 0xcd, 0x98, 0x08, 0x5a, 0x96, 0x56, 0xd7, 0x36, 0xe7, 0x4d, 0x76, 0x6b, 0x72, 0xb2, 0x8e,
	0x39, 0x9e, 0x60, 0x07, 0xd4, 0xe2, 0xdb, 0x50, 0xac, 0x51, 0xc2, 0x27, 0x29, 0xd9, 0x03, 0x29,
	0x10, 0x8e, 0x8c, 0xc4, 0x3f, 0x4e, 0x8f, 0xaa, 0x0f, 0xd0, 0xf1, 0xf0, 0xb8, 0x1a, 0xb2, 0x40,
	0xfd, 0x39, 0x3f, 0x3c, 0x47, 0xfb, 0x8f, 0xa2, 0x3e, 0xd9, 0x21, 0xb4, 0x4d, 0x97, 0xc1, 0x41,
	0xc7, 0x88, 0xe5, 0x7b, 0xc4, 0x39, 0xd0, 0x87, 0x45, 0x16, 0xfe, 0x81, 0x28, 0x24, 0x36, 0xd0,
	0xaa, 0xcb, 0xf8, 0x52, 0x02, 0xb6, 0x02, 0xe3, 0x92, 0xef, 0x65, 0x65, 0xed, 0xc0, 0x78, 0x32,
	0xf2, 0x35, 0x0b, 0x48, 0x6e, 0x6f, 0x62, 0x87, 0x89, 0xcc, 0x5c, 0xec, 0x5d, 0x22, 0x83, 0x0b,
	0xa8, 0xe8, 0x01, 0x65, 0x43, 0x9e, 0x02, 0xaa, 0x94, 0xcd, 0x52, 0x56, 0x47, 0xfb, 0xa7, 0xa2,
	0x1a, 0x79, 0x77, 0x6d, 0x6a, 0x73, 0x1b, 0x8a, 0x0a, 0x38, 0xfc, 0x4c, 0xa6, 0x8f, 0x88, 0x25,
	0xfd, 0x7d, 0x51, 0x4a, 0x6c, 0xa0, 0xa5, 0x10, 0x5d, 0x00, 0x10, 0xb2, 0x47, 0x9f, 0xef, 0x65,
	0x44, 0x49, 0xee, 0xc8, 0xc9, 0xe5, 0xcc, 0x71, 0x73, 0x2a, 0x93, 0xcd, 0xf3, 0x16, 0x8a, 0x22,
	0x38, 0x8e, 0xa0, 0x17, 0x54, 0x0f, 0x39, 0x0a, 0xe8, 0x4a, 0xd6, 0xcd, 0x0c, 0xa8, 0xb9, 0x6a,
	0xbf, 0x47, 0xc2, 0x93, 0xda, 0xa5, 0xe6, 0x1e, 0xde, 0x21, 0x7e, 0x53, 0xd7, 0xc5, 0xc4, 0xcd,
	0x03, 0xf9, 0x08, 0xbc, 0x43, 0x5f, 0x13, 0x50, 0x42, 0x3e, 0x27, 0xef, 0x78, 0x62, 0xe7, 0x0d,
	0x68, 0xdf, 0x50, 0xd4, 0x11, 0xec, 0x73, 0xd7, 0xf4, 0x9b, 0x5b, 0x1e, 0xae, 0x93, 0xf4, 0x66,
	0xb4, 0xad, 0x3f, 0x2a, 0x02, 0xb9, 0x0a, 0xf5, 0x17, 0xa8, 0x6c, 0x84, 0x1a, 0xf1, 0xa5, 0xe2,
	0x95, 0xa4, 0x54, 0x29, 0x03, 0xe5, 0xf0, 0xcd, 0xc8, 0xd7, 0xc4, 0xe9, 0x19, 0x54, 0x6a, 0x4d,
	0x6b, 0xa8, 0x23, 0x31, 0x07, 0xee, 0x9a, 0x4d, 0x0f, 0xa6, 0x58, 0x1c, 0xcc, 0x4c, 0xbf, 0x2c,
	0x02, 0x70, 0x03, 0x88, 0x44, 0x2a, 0xeb, 0xee, 0xaa, 0x47, 0x50, 0x84, 0xb7, 0x03, 0xe3, 0x72,
	0x38, 0x85, 0x25, 0x60, 0x05, 0x95, 0xf6, 0xd1, 0x76, 0x55, 0x6d, 0x87, 0x90, 0xa6, 0xc9, 0x49,
	0xa3, 0xe9, 0x7a, 0xd8, 0xb3, 0x09, 0x33, 0xb7, 0xf5, 0x2b, 0xc2, 0xe5, 0x57, 0x60, 0x3b, 0x00,
	0xba, 0x9e, 0x82, 0xe0, 0xee, 0x55, 0x31, 0x4a, 0x1e, 0x90, 0x0b, 0xb3, 0x17, 0x64, 0x57, 0x67,
	0x5e, 0x40, 0x05, 0x2b, 0xda, 0x81, 0x3a, 0x60, 0x61, 0x6b, 0x9b, 0x98, 0xf6, 0x16, 0x75, 0x3d,
	0x52, 0x37, 0x37, 0x6d, 0x87, 0x30, 0xfd, 0x31, 0xe1, 0xe2, 0x12, 0x1c, 0x6f, 0x02, 0x5e, 0x0a,
	0xd1, 0x45, 0x00, 0x93, 0x40, 0x17, 0x90, 0xc2, 0x4e, 0x4c, 0x76, 0x18, 0x2a, 0x9a, 0xd1, 0xbe,
	0xa3, 0xa8, 0x97, 0x9b, 0x9e, 0xbb, 0x05, 0x95, 0x8d, 0xe9, 0x37, 0xeb, 0x98, 0x13, 0xb9, 0x5a,
	0x78, 0x5c, 0xf8, 0xbe, 0x0e, 0x97, 0xdd, 0x58, 0x6b, 0x43, 0x28, 0xc9, 0x95, 0x41, 0x58, 0x71,
	0x77, 0xc0, 0x25, 0x3a, 0x2f, 0x4a, 0x81, 0x50, 0x5e, 0x44, 0x9d, 0x2c, 0x6a, 0x6f, 0x2b, 0xea,
	0xb0, 0x63, 0x37, 0x6c, 0x6e, 0xd6, 0x30, 0xad, 0xef, 0xd9, 0x75, 0xbe, 0x6d, 0xda, 0xd4, 0x74,
	0x30, 0xd5, 0x47, 0x45, 0x48, 0x56, 0x44, 0x25, 0x09, 0x1a, 0x73, 0xb1, 0xc2, 0x12, 0x5d, 0xc6,
	0x34, 0xad, 0xfe, 0x8b, 0xd8, 0xc7, 0x84, 0xa5, 0xcc, 0x94, 0xf6, 0x96, 0xa2, 0x6a, 0x0d, 0x9b,
	0x9a, 0xdb, 0x6e, 0x83, 0x98, 0x75, 0x9b, 0xed, 0x98, 0x9b, 0x1e, 0x21, 0xba, 0x31, 0xa6, 0x8c,
	0x77, 0xcf, 0xf4, 0x4c, 0x84, 0xcf, 0x6c, 0x13, 0x6b, 0xf6, 0x1b, 0x64, 0xee, 0xa5, 0xf7, 0x03,
	0xa3, 0x0b, 0x76, 0x62, 0xc3, 0xa6, 0xaf, 0xb8, 0x0d, 0xb2, 0x60, 0xb3, 0x9d, 0x45, 0x8f, 0x90,
	0x64, 0x75, 0xe4, 0xe4, 0xf2, 0x3e, 0x18, 0xbb, 0x06, 0x44, 0xce, 0x4e, 0x8f, 0x5d, 0x43, 0xf9,
	0xee, 0xda, 0x3d, 0x45, 0xed, 0x89, 0xd7, 0xbb, 0x38, 0x83, 0xc6, 0xc4, 0x19, 0xf4, 0x27, 0x71,
	0xff, 0x89, 0x17, 0x6d, 0x78, 0x12, 0x75, 0x7b, 0x69, 0xb3, 0x1d, 0x18, 0x0b, 0x71, 0xf9, 0x11,
	0xcb, 0x4a, 0x4e, 0xa5, 0x68, 0x07, 0xb0, 0xdc, 0x01, 0xd3, 0x20, 0x1c, 0x4f, 0x7c, 0x91, 0xb9,
	0x14, 0x32, 0x78, 0xc6, 0x6c, 0xb6, 0x79, 0x7a, 0x54, 0x1d, 0x7f, 0x50, 0x53, 0x70, 0x59, 0x92,
	0xf8, 0xa2, 0xd4, 0x8e, 0xe7, 0x68, 0xaf, 0xa9, 0xfd, 0xd8, 0xd9, 0x83, 0x52, 0x2c, 0x7c, 0x5a,
	0xa0, 0x84, 0x33, 0xfd, 0x09, 0xf1, 0xa2, 0x07, 0x15, 0x70, 0x5f, 0x08, 0x8a, 0x12, 0xfd, 0x36,
	0xe1, 0xb0, 0xf0, 0x07, 0xc3, 0x0c, 0x93, 0x91, 0x57, 0x50, 0x5e, 0x51, 0xfb, 0x9f, 0xa2, 0x8e,
	0xbb, 0xbb, 0xc4, 0xdb, 0xf3, 0x6c, 0x0e, 0x89, 0xa3, 0xe1, 0x72, 0x62, 0xd6, 0xc9, 0xae, 0x6d,
	0x11, 0x93, 0xe2, 0x06, 0x61, 0x90, 0x4e, 0xa3, 0xaa, 0x48, 0xaf, 0xa4, 0x6f, 0x4d, 0x23, 0x77,
	0xe2, 0x4e, 0x48, 0xf4, 0x59, 0x20, 0xbb, 0xb7, 0x41, 0xbd, 0x15, 0x18, 0x57, 0xdd, 0x02, 0x64,
	0x5b, 0x44, 0xa0, 0x77, 0xe8, 0x7c, 0x68, 0xaa, 0x1d, 0x18, 0x9f, 0x14, 0x04, 0x1f, 0x40, 0xb7,
	0xf3, 0xa2, 0x84, 0x92, 0xae, 0x03, 0x0f, 0xf4, 0x20, 0x2c, 0xb4, 0xaf, 0xa8, 0x43, 0x90, 0xc6,
	0x4c, 0x9b, 0xd6, 0xc9, 0xbe, 0x09, 0x2b, 0xb9, 0xe6, 0xb8, 0xd6, 0x0e, 0xd3, 0xaf, 0x8a, 0x2d,
	0x0d, 0x8b, 0x46, 0x03, 0x85, 0x25, 0xc0, 0x57, 0x6c, 0x3a, 0x27, 0xd0, 0xe4, 0x09, 0xb7, 0x08,
	0x95, 0x5e, 0x9b, 0xc3, 0xcb, 0x30, 0x2a, 0xb1, 0xa4, 0xfd, 0x03, 0xee, 0xbe, 0x14, 0x5b, 0x3b,
	0xa4, 0x6e, 0x52, 0x97, 0xdb, 0x9b, 0xb6, 0x85, 0xc3, 0xc7, 0x88, 0x3a, 0xd3, 0xab, 0x62, 0x7e,
	0xdf, 0x81, 0x70, 0x0f, 0x6f, 0x84, 0x4a, 0xb7, 0x25, 0x9d, 0xa5, 0x05, 0x88, 0xf6, 0xb0, 0x5f,
	0x8a, 0xb4, 0x03, 0xe3, 0x4a, 0x98, 0xda, 0xcb, 0x60, 0xf1, 0x70, 0x59, 0x8a, 0xb4, 0x8f, 0xaa,
	0x1d, 0x2c, 0x1e, 0x1e, 0x57, 0x3b, 0xb0, 0x40, 0xa5, 0x3d, 0xea, 0x4c, 0x43, 0xea, 0x45, 0xee,
	0xe1, 0xcd, 0x4d, 0xdb, 0x32, 0x2d, 0x07, 0x33, 0xa6, 0x5f, 0x13, 0x61, 0x7d, 0x1e, 0x8a, 0xe7,
	0x08, 0x98, 0x07, 0x79, 0x3b, 0x30, 0xb4, 0x30, 0xa0, 0x92, 0x30, 0x79, 0xb5, 0xc9, 0xa8, 0x6a,
	0x77, 0xd5, 0x81, 0x28, 0xc4, 0xe6, 0xa6, 0xeb, 0xd4, 0x89, 0x67, 0x36, 0x31, 0xdf, 0xd6, 0x9f,
	0x14, 0xbb, 0x7e, 0x16, 0x8e, 0x81, 0x08, 0x5e, 0x14, 0xe8, 0x2a, 0xe6, 0xdb, 0x49, 0x8a, 0x29,
	0x20, 0xd2, 0x74, 0xbd, 0x09, 0xcb, 0x4a, 0x79, 0x13, 0x15, 0xbb, 0x6b, 0x3b, 0xea, 0x25, 0x46,
	0xb8, 0xe9, 0xb8, 0x7b, 0x66, 0xd3, 0xb3, 0x5d, 0xcf, 0xe6, 0x07, 0xfa, 0x53, 0x62, 0x2b, 0xc0,
	0x78, 0xbd, 0x8c, 0xf0, 0x65, 0x77, 0x6f, 0x35, 0x42, 0x92, 0xc1, 0xb2, 0xe2, 0x8e, 0x17, 0x8b,
	0x5c, 0x77, 0xed, 0x5d, 0x45, 0x1d, 0x6e, 0xe0, 0xfd, 0xd8, 0x39, 0xcb, 0xa5, 0x96, 0xef, 0x79,
	0x84, 0x5a, 0x07, 0xfa, 0xb8, 0x88, 0x1e, 0x13, 0xef, 0x2d, 0x78, 0x6f, 0x05, 0xef, 0x87, 0x1c,
	0xe7, 0x53, 0x15, 0x38, 0xe8, 0x1b, 0x25, 0xf2, 0xe4, 0xa0, 0x2f, 0x03, 0xe3, 0x40, 0x8b, 0x07,
	0x92, 0x72, 0xbb, 0xa8, 0xd4, 0xaa, 0xf6, 0xa1, 0xa2, 0x0e, 0x58, 0x1e, 0x66, 0xdb, 0xb9, 0x32,
	0xe0, 0x69, 0x31, 0x19, 0xef, 0x89, 0x32, 0x60, 0x3e, 0x2e, 0x03, 0xac, 0xa8, 0x0c, 0x58, 0x0c,
	0x4f, 0x64, 0xe8, 0x96, 0x5e, 0x59, 0x4b, 0x93, 0xaf, 0xd0, 0x29, 0x5e, 0xed, 0x85, 0x18, 0x56,
	0x70, 0x7f, 0xc1, 0x08, 0x14, 0x08, 0x56, 0x54, 0x20, 0x54, 0x1f, 0xc4, 0x0c, 0x94, 0x08, 0xf3,
	0x61, 0x89, 0x90, 0x33, 0xe6, 0x39, 0xda, 0x4f, 0x14, 0x75, 0x24, 0xef, 0x5e, 0xfc, 0x32, 0xf3,
	0x8c, 0x98, 0x7f, 0xfb, 0x24, 0x30, 0x2e, 0xcc, 0x23, 0xe9, 0xa3, 0x42, 0xd6, 0x4a, 0xfe, 0xa3,
	0x42, 0x29, 0xda, 0x69, 0x69, 0x1c, 0x1e, 0x57, 0x53, 0xdb, 0xa8, 0xdc, 0xb2, 0xf6, 0x35, 0x45,
	0x1d, 0x66, 0xdc, 0xa7, 0x26, 0xdc, 0x97, 0xb0, 0x63, 0xef, 0x12, 0x33, 0xbc, 0x05, 0x33, 0xfd,
	0xd9, 0xe4, 0x16, 0x3a, 0x00, 0x1a, 0xaf, 0xc6, 0x0a, 0x6b, 0x80, 0xaf, 0x25, 0x77, 0xa3, 0x12,
	0x2c, 0x7b, 0x85, 0x97, 0xd2, 0xd8, 0xd9, 0xe9, 0x9b, 0x53, 0xa8, 0xcc, 0x1a, 0x94, 0xc9, 0x39,
	0x1a, 0x90, 0x4d, 0x99, 0xfe, 0x9c, 0x20, 0xf1, 0x59, 0xd8, 0x97, 0x99, 0x6e, 0x2b, 0x36, 0x4d,
	0x2b, 0x88, 0x02, 0x22, 0xdf, 0x0c, 0x33, 0x69, 0x74, 0x66, 0x0a, 0x15, 0xed, 0xc0, 0x5d, 0xbc,
	0x47, 0x8c, 0x1e, 0x7f, 0xeb, 0x7a, 0x5e, 0x64, 0xce, 0xfa, 0x49, 0x60, 0xf4, 0x22, 0xbc, 0xb7,
	0xc6, 0x7d, 0xe9, 0x2b, 0x57, 0x37, 0x4b, 0x9b, 0xc9, 0x7b, 0x54, 0x2a, 0xbb, 0xef, 0x97, 0xb8,
	0x9c, 0x45, 0x24, 0xdb, 0xd3, 0x76, 0xd5, 0x3e, 0xa8, 0x3c, 0x6b, 0x98, 0x11, 0x33, 0xfc, 0xec,
	0xa8, 0x4f, 0x8c, 0x29, 0xe3, 0xbd, 0x33, 0xbd, 0xf1, 0x65, 0x68, 0x5d, 0x48, 0xc5, 0x03, 0x62,
	0x6f, 0xac, 0x1a, 0xca, 0xd2, 0x34, 0x95, 0x11, 0x57, 0xc6, 0xa2, 0xd2, 0x23, 0x5a, 0x1e, 0x6f,
	0x1d, 0x57, 0x15, 0x94, 0xeb, 0xaa, 0x7d, 0xf7, 0x8c, 0x7a, 0x15, 0xb2, 0x46, 0x92, 0x2e, 0xa0,
	0x80, 0xb5, 0xdc, 0x06, 0x2c, 0x59, 0x8f, 0xdc, 0xf5, 0x09, 0xe3, 0xe6, 0x8e, 0x5d, 0xd3, 0x27,
	0xc5, 0x74, 0xfc, 0x55, 0x89, 0x3e, 0x57, 0xae, 0xe0, 0xfd, 0xf9, 0x25, 0x14, 0xe2, 0xaf, 0xda,
	0x73, 0xad, 0xc0, 0x30, 0x1a, 0x78, 0x3f, 0xd9, 0xe2, 0x7c, 0x29, 0xb2, 0x91, 0xaa, 0x24, 0x67,
	0xdf, 0x7d, 0xf4, 0xa4, 0xb2, 0xef, 0xbe, 0x26, 0xef, 0xaf, 0x12, 0x7d, 0x00, 0xcd, 0xd1, 0x45,
	0xf7, 0xe9, 0x56, 0xd3, 0xbe, 0xac, 0xf6, 0xf8, 0x4d, 0xda, 0x4c, 0x76, 0xed, 0x2f, 0x16, 0xc5,
	0xb6, 0xfd, 0xdc, 0x49, 0x60, 0x0c, 0x2d, 0x90, 0xa6, 0x47, 0x2c, 0xcc, 0x49, 0x7d, 0x63, 0x95,
	0xae, 0xa6, 0x5b, 0x58, 0x79, 0x3e, 0x3d, 0x3b, 0x9b, 0xb4, 0x19, 0x01, 0xcf, 0xb9, 0x0d, 0x1b,
	0xce, 0x6f, 0x7e, 0x50, 0x39, 0x3c, 0xae, 0x96, 0x77, 0xd6, 0x15, 0xd4, 0x2d, 0x75, 0xd1, 0x7e,
	0xa6, 0x44, 0xc3, 0xc7, 0xcf, 0xa4, 0xef, 0x2e, 0x8a, 0xf0, 0xbf, 0x05, 0xe1, 0x1f, 0xcc, 0x9a,
	0x48, 0x9e, 0x4c, 0xc5, 0xf0, 0x63, 0xc9, 0xf0, 0xf2, 0x53, 0xa7, 0xc4, 0x21, 0x8d, 0xee, 0xe5,
	0xce, 0x5a, 0x87, 0xc7, 0xd5, 0xd2, 0x51, 0x74, 0x05, 0xa9, 0x69, 0x2f, 0xed, 0xb7, 0x8a, 0xda,
	0x2b, 0x68, 0xa6, 0x0f, 0xa2, 0xbf, 0x0c, 0x89, 0x7e, 0x53, 0x5c, 0x3d, 0xb2, 0x26, 0xa4, 0xc7,
	0x51, 0x41, 0xb5, 0x92, 0x50, 0xcd, 0x3e, 0x67, 0x96, 0x92, 0x7d, 0xec, 0xe3, 0xf4, 0xe0, 0x82,
	0x51, 0x3e, 0x96, 0xae, 0xa0, 0x1e, 0xb9, 0x67, 0x4a, 0x39, 0x7d, 0xf6, 0x7c, 0xaf, 0x33, 0x65,
	0xe9, 0x09, 0x34, 0x47, 0x39, 0xfb, 0x68, 0xd9, 0x99, 0x72, 0x27, 0xbd, 0x22, 0xe5, 0x58, 0x33,
	0xa6, 0x9c, 0xbc, 0x72, 0x6e, 0xaa, 0xe1, 0xe7, 0x95, 0x24, 0x47, 0xfd, 0x6a, 0x51, 0x24, 0xa9,
	0xcf, 0x64, 0xf9, 0x8a, 0x2f, 0x14, 0x69, 0xb2, 0x92, 0x16, 0xa3, 0x97, 0x22, 0x12, 0x51, 0x18,
	0x47, 0x42, 0x98, 0xa8, 0x0b, 0x8b, 0x25, 0x99, 0xd9, 0xb4, 0xb8, 0xfe, 0x6b, 0x08, 0x91, 0x32,
	0xb7, 0x72, 0x12, 0x18, 0x8f, 0xa5, 0x23, 0xae, 0x64, 0x0b, 0xaa, 0x55, 0x8b, 0x67, 0xe3, 0xd4,
	0x28, 0xe0, 0xd9, 0xe1, 0xb5, 0xa2, 0x02, 0x24, 0xe4, 0xc1, 0x5c, 0x3a, 0x62, 0x16, 0xa6, 0x4c,
	0xff, 0x4d, 0x38, 0x4b, 0xeb, 0x39, 0x0a, 0xf2, 0x36, 0x5e, 0x03, 0xc5, 0x1c, 0x85, 0x02, 0x5e,
	0x9c, 0x2a, 0xc1, 0xa4, 0xa0, 0x37, 0xf7, 0xf2, 0xfb, 0x1f, 0x8d, 0x76, 0x1d, 0x7f, 0x34, 0xda,
	0xf5, 0xef, 0x93, 0xd1, 0xae, 0x6f, 0xdf, 0x1b, 0xed, 0x7a, 0xe7, 0xde, 0xa8, 0x72, 0x7c, 0x6f,
	0xb4, 0xeb, 0xef, 0xf7, 0x46, 0xbb, 0x5e, 0x7f, 0x7a, 0xcb, 0xe6, 0xdb, 0x7e, 0x6d, 0xc2, 0x72,
	0x1b, 0x93, 0xc9, 0x05, 0x41, 0xfa, 0x95, 0xfe, 0x57, 0xa4, 0x76, 0x5e, 0xfc, 0x39, 0xe4, 0xfa,
	0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x10, 0x4a, 0xc7, 0x47, 0x88, 0x22, 0x00, 0x00,
}

func (m *OptionsConfiguration) ProtoSize() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RawListenAddresses) > 0 {
		for _, s := range m.RawListenAddresses {
			l = len(s)
			n += 1 + l + sovOptionsconfiguration(uint64(l))
		}
	}
	if len(m.RawGlobalAnnServers) > 0 {
		for _, s := range m.RawGlobalAnnServers {
			l = len(s)
			n += 1 + l + sovOptionsconfiguration(uint64(l))
		}
	}
	if m.GlobalAnnEnabled {
		n += 2
	}
	if m.LocalAnnEnabled {
		n += 2
	}
	if m.LocalAnnPort != 0 {
		n += 1 + sovOptionsconfiguration(uint64(m.LocalAnnPort))
	}
	l = len(m.LocalAnnMCAddr)
	if l > 0 {
		n += 1 + l + sovOptionsconfiguration(uint64(l))
	}
	if m.MaxSendKbps != 0 {
		n += 1 + sovOptionsconfiguration(uint64(m.MaxSendKbps))
	}
	if m.MaxRecvKbps != 0 {
		n += 1 + sovOptionsconfiguration(uint64(m.MaxRecvKbps))
	}
	if m.ReconnectIntervalS != 0 {
		n += 1 + sovOptionsconfiguration(uint64(m.ReconnectIntervalS))
	}
	if m.RelaysEnabled {
		n += 2
	}
	if m.RelayReconnectIntervalM != 0 {
		n += 1 + sovOptionsconfiguration(uint64(m.RelayReconnectIntervalM))
	}
	if m.StartBrowser {
		n += 2
	}
	if m.NATEnabled {
		n += 2
	}
	if m.NATLeaseM != 0 {
		n += 1 + sovOptionsconfiguration(uint64(m.NATLeaseM))
	}
	if m.NATRenewalM != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.NATRenewalM))
	}
	if m.NATTimeoutS != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.NATTimeoutS))
	}
	if m.URAccepted != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.URAccepted))
	}
	if m.URSeen != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.URSeen))
	}
	l = len(m.URUniqueID)
	if l > 0 {
		n += 2 + l + sovOptionsconfiguration(uint64(l))
	}
	l = len(m.URURL)
	if l > 0 {
		n += 2 + l + sovOptionsconfiguration(uint64(l))
	}
	if m.URPostInsecurely {
		n += 3
	}
	if m.URInitialDelayS != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.URInitialDelayS))
	}
	if m.RestartOnWakeup {
		n += 3
	}
	if m.AutoUpgradeIntervalH != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.AutoUpgradeIntervalH))
	}
	if m.UpgradeToPreReleases {
		n += 3
	}
	if m.KeepTemporariesH != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.KeepTemporariesH))
	}
	if m.CacheIgnoredFiles {
		n += 3
	}
	if m.ProgressUpdateIntervalS != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.ProgressUpdateIntervalS))
	}
	if m.LimitBandwidthInLan {
		n += 3
	}
	l = m.MinHomeDiskFree.ProtoSize()
	n += 2 + l + sovOptionsconfiguration(uint64(l))
	l = len(m.ReleasesURL)
	if l > 0 {
		n += 2 + l + sovOptionsconfiguration(uint64(l))
	}
	if len(m.AlwaysLocalNets) > 0 {
		for _, s := range m.AlwaysLocalNets {
			l = len(s)
			n += 2 + l + sovOptionsconfiguration(uint64(l))
		}
	}
	if m.OverwriteRemoteDevNames {
		n += 3
	}
	if m.TempIndexMinBlocks != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.TempIndexMinBlocks))
	}
	if len(m.UnackedNotificationIDs) > 0 {
		for _, s := range m.UnackedNotificationIDs {
			l = len(s)
			n += 2 + l + sovOptionsconfiguration(uint64(l))
		}
	}
	if m.TrafficClass != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.TrafficClass))
	}
	l = len(m.DefaultFolderPath)
	if l > 0 {
		n += 2 + l + sovOptionsconfiguration(uint64(l))
	}
	if m.SetLowPriority {
		n += 3
	}
	if m.RawMaxFolderConcurrency != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.RawMaxFolderConcurrency))
	}
	l = len(m.CRURL)
	if l > 0 {
		n += 2 + l + sovOptionsconfiguration(uint64(l))
	}
	if m.CREnabled {
		n += 3
	}
	if m.StunKeepaliveStartS != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.StunKeepaliveStartS))
	}
	if m.StunKeepaliveMinS != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.StunKeepaliveMinS))
	}
	if len(m.RawStunServers) > 0 {
		for _, s := range m.RawStunServers {
			l = len(s)
			n += 2 + l + sovOptionsconfiguration(uint64(l))
		}
	}
	if m.DatabaseTuning != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.DatabaseTuning))
	}
	if m.RawMaxCIRequestKiB != 0 {
		n += 2 + sovOptionsconfiguration(uint64(m.RawMaxCIRequestKiB))
	}
	if m.DeprecatedUPnPEnabled {
		n += 4
	}
	if m.DeprecatedUPnPLeaseM != 0 {
		n += 3 + sovOptionsconfiguration(uint64(m.DeprecatedUPnPLeaseM))
	}
	if m.DeprecatedUPnPRenewalM != 0 {
		n += 3 + sovOptionsconfiguration(uint64(m.DeprecatedUPnPRenewalM))
	}
	if m.DeprecatedUPnPTimeoutS != 0 {
		n += 3 + sovOptionsconfiguration(uint64(m.DeprecatedUPnPTimeoutS))
	}
	if len(m.DeprecatedRelayServers) > 0 {
		for _, s := range m.DeprecatedRelayServers {
			l = len(s)
			n += 3 + l + sovOptionsconfiguration(uint64(l))
		}
	}
	if m.DeprecatedMinHomeDiskFreePct != 0 {
		n += 11
	}
	if m.DeprecatedMaxConcurrentScans != 0 {
		n += 3 + sovOptionsconfiguration(uint64(m.DeprecatedMaxConcurrentScans))
	}
	return n
}

func sovOptionsconfiguration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOptionsconfiguration(x uint64) (n int) {
	return sovOptionsconfiguration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
